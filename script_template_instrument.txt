{manually create groups, set surround panner in instrument main fx, add "GLIDE" mod & "ENV_AHDSR" mod in every group. Modulators should be bypased in the release group. Then load this script.}

on init
	set_ui_height(7)


	set_script_title("  ~ t e m p l a t t e ~ ")
	message("")

	declare @label_copyright_string
		@label_copyright_string := 		"(c) Jan Machalski "
	declare ui_label $label_copyright (1,1)
		set_text ($label_copyright, @label_copyright_string)
		set_control_par(get_ui_id ($label_copyright),$CONTROL_PAR_POS_X,496)
		set_control_par(get_ui_id ($label_copyright),$CONTROL_PAR_POS_Y,2)
		set_control_par(get_ui_id($label_copyright),$CONTROL_PAR_WIDTH,88)
		set_control_par(get_ui_id($label_copyright),$CONTROL_PAR_HEIGHT,11)
		set_control_par(get_ui_id($label_copyright),$CONTROL_PAR_TEXT_ALIGNMENT,2)

	declare $iter := 0

	declare const $num_of_busses := 4
	declare const $bus_fx_slot_num__stereo_preemphasis := 0
	declare const $bus_fx_slot_num__stereo_deemphasis := 7
	declare const $busclean_fx_slot_num__saturation := 1
	declare const $busclean_fx_slot_num__eq3band := 2
	declare const $busclean_fx_slot_num__transient_master := 3
	declare const $busclean_fx_slot_num__notch_filter := 4
	declare const $busclean_fx_slot_num__tape_sat := 5
	declare const $busclean_fx_slot_num__hp_filter := 6
	declare const $busdrive_fx_slot_num__saturation := 1
	declare const $busdrive_fx_slot_num__phase_filter := 2
	declare const $busdrive_fx_slot_num__cat := 3
	declare const $busdrive_fx_slot_num__wah := 4
	declare const $busdrive_fx_slot_num__lofi := 5
	declare const $busdrive_fx_slot_num__tape_sat := 6
	declare const $bussynth_fx_slot_num__lofi := 1
	declare const $bussynth_fx_slot_num__saturation := 2
	declare const $bussynth_fx_slot_num__phase_filter := 3
	declare const $bussynth_fx_slot_num__karplusstrong := 4
	declare const $bussynth_fx_slot_num__distortion := 5
	declare const $bussynth_fx_slot_num__choral := 6
	declare const $sendfx_slot_num__replika_delay_A := 5
	declare const $sendfx_slot_num__replika_delay_B := 6
	declare const $sendfx_slot_num__replika_karplus_strong := 7
	declare const $sendfx_slot_num__reverb := 0
	declare const $insertfx_slot_num__replika_karplus_strong := 4
	declare const $insertfx_slot_num__send_levels := 6
	declare const $insertfx_slot_num__gain := 7
	declare const $mainfx_slot_num__stereo_preemphasis := 0
	declare const $mainfx_slot_num__sv_hp2 := 1
	declare const $mainfx_slot_num__transient_master := 2
	declare const $mainfx_slot_num__sv_lp2 := 3
	declare const $mainfx_slot_num__solid_bus_compressor := 4
	declare const $mainfx_slot_num__stereo_deemphasis := 5

	declare const $num_of_bus_with_scripted_fx := 0

	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $mainfx_slot_num__stereo_preemphasis, $NI_MAIN_BUS)
	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $mainfx_slot_num__sv_hp2, $NI_MAIN_BUS)
		set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_SV_HP2, -1, $mainfx_slot_num__sv_hp2, $NI_MAIN_BUS)
		set_engine_par($ENGINE_PAR_CUTOFF, 0, -1, $mainfx_slot_num__sv_hp2, $NI_MAIN_BUS)
	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_TRANS_MASTER, -1, $mainfx_slot_num__transient_master, $NI_MAIN_BUS)
	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $mainfx_slot_num__sv_lp2, $NI_MAIN_BUS)
		set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_SV_LP2, -1, $mainfx_slot_num__sv_lp2, $NI_MAIN_BUS)
		set_engine_par($ENGINE_PAR_CUTOFF, 1000000, -1, $mainfx_slot_num__sv_lp2, $NI_MAIN_BUS)
	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_BUS_COMP, -1, $mainfx_slot_num__solid_bus_compressor, $NI_MAIN_BUS)
		set_engine_par($ENGINE_PAR_SCOMP_ATTACK, 1000000*3/4, -1, $mainfx_slot_num__solid_bus_compressor, $NI_MAIN_BUS)
		set_engine_par($ENGINE_PAR_SCOMP_RELEASE, 1000000*3/7, -1, $mainfx_slot_num__solid_bus_compressor, $NI_MAIN_BUS)
	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $mainfx_slot_num__stereo_deemphasis, $NI_MAIN_BUS)


	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_SEND_LEVELS, -1, $insertfx_slot_num__send_levels, $NI_INSERT_BUS)

	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_GAINER, -1, $insertfx_slot_num__gain, $NI_INSERT_BUS)

	{
	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $FILTER_TYPE_AR_HP4, 0, 4, $NI_INSERT_BUS)
		set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_AR_HP4, 0, 4, $NI_INSERT_BUS)
		}





	if(1=1)
		declare $surround_panner_is_connected := -2
		declare $surround_panner_group := -2137
		declare $surround_panner_slot := -2137
		declare $surround_panner_nibustype := -2137
		$iter := 0
		while ($iter < 8)
			if (get_engine_par($ENGINE_PAR_EFFECT_TYPE, -1, $iter, $NI_MAIN_BUS) = $EFFECT_TYPE_SURROUND_PANNER)
				$surround_panner_group := -1
				$surround_panner_slot := $iter
				$surround_panner_nibustype := $NI_MAIN_BUS
				$surround_panner_is_connected := 1
			end if
			inc($iter)
		end while
		$iter := 0
		while ($iter < 8)
			if (get_engine_par($ENGINE_PAR_EFFECT_TYPE, -1, $iter, $NI_INSERT_BUS) = $EFFECT_TYPE_SURROUND_PANNER)
				$surround_panner_group := -1
				$surround_panner_slot := $iter
				$surround_panner_nibustype := $NI_INSERT_BUS
				$surround_panner_is_connected := 1
			end if
			inc($iter)
		end while
		$iter := 0
		while ($iter < 8)
			if (get_engine_par($ENGINE_PAR_EFFECT_TYPE, 0, $iter, $NI_INSERT_BUS) = $EFFECT_TYPE_SURROUND_PANNER)
				$surround_panner_group := -1
				$surround_panner_slot := $iter
				$surround_panner_nibustype := $NI_INSERT_BUS
				$surround_panner_is_connected := 1
			end if
			inc($iter)
		end while
	end if







    

	{
	set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, 0, $NI_BUS_OFFSET + 5)
	}

	declare ~last_note_freq_hz := 440.0

	declare $last_played_zone_id := -1


	if ( get_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE, -1, $sendfx_slot_num__reverb, $NI_SEND_BUS) = $EFFECT_TYPE_NONE)
		set_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE, $EFFECT_TYPE_REVERB2, -1, $sendfx_slot_num__reverb, $NI_SEND_BUS)
		set_engine_par($ENGINE_PAR_RV2_TYPE, $NI_REVERB2_TYPE_HALL, -1, $sendfx_slot_num__reverb, $NI_SEND_BUS)
		set_engine_par($ENGINE_PAR_RV2_DAMPING, 0, -1, $sendfx_slot_num__reverb, $NI_SEND_BUS)
		set_engine_par($ENGINE_PAR_RV2_TIME, 1000000*2/3, -1, $sendfx_slot_num__reverb, $NI_SEND_BUS)
		set_engine_par($ENGINE_PAR_RV2_SIZE, 1000000, -1, $sendfx_slot_num__reverb, $NI_SEND_BUS)
		set_engine_par($ENGINE_PAR_RV2_MOD, 0, -1, $sendfx_slot_num__reverb, $NI_SEND_BUS)
	end if
	

	declare $user_zone_groups_offset := 0 {drag and drop samples are placed starting from a group with this index}
		$user_zone_groups_offset := $user_zone_groups_offset mod $NUM_GROUPS {prevent errors when index is to big}

	declare $num_of_user_zones
		if ($NUM_GROUPS - $user_zone_groups_offset > 0)
			$num_of_user_zones := $NUM_GROUPS - $user_zone_groups_offset
		else
			$num_of_user_zones := 1
		end if
    set_num_user_zones($num_of_user_zones)
    declare $current_dnd_group
    	$current_dnd_group := $user_zone_groups_offset
    	make_persistent($current_dnd_group)
    declare $dnd_sample_count := 0
    	make_persistent($dnd_sample_count)
    {
	set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, $NUM_GROUPS)
	}
	{
	$iter := 0
	while ($iter < 128)
		set_zone_par(%NI_USER_ZONE_IDS[$iter], $ZONE_PAR_GROUP, $iter)
	end while
	}


	declare ui_panel $panel__allpanels

	declare ui_panel $top_navigation_ui_panel
		set_control_par(get_ui_id($top_navigation_ui_panel),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__allpanels))
	declare ui_panel $panel__sample_controls
		set_control_par(get_ui_id($panel__sample_controls),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__allpanels))
	declare ui_panel $panel__bus_effect_controls
		set_control_par(get_ui_id($panel__bus_effect_controls),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__allpanels))
		declare ui_panel $panel__bus_clean_controls
			set_control_par(get_ui_id($panel__bus_clean_controls),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_effect_controls))
		declare ui_panel $panel__bus_drive_controls
			set_control_par(get_ui_id($panel__bus_drive_controls),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_effect_controls))
		declare ui_panel $panel__bus_synth_controls
			set_control_par(get_ui_id($panel__bus_synth_controls),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_effect_controls))
	declare ui_panel $panel__send_effects_controls
		set_control_par(get_ui_id($panel__send_effects_controls),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__allpanels))
	declare ui_panel $panel_panner_tab
		set_control_par(get_ui_id($panel_panner_tab),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__allpanels))

	declare ui_panel $panel__effect_controls

	declare const $slider_width := 88

		declare ui_panel $panel_dragndrop
				set_control_par(get_ui_id($panel_dragndrop),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__sample_controls))
				set_control_par(get_ui_id ($panel_dragndrop),$CONTROL_PAR_POS_X,128)
				set_control_par(get_ui_id ($panel_dragndrop),$CONTROL_PAR_POS_Y,20)


			declare ui_label $label__dragndrop(1,1)
				set_control_par(get_ui_id($label__dragndrop),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_dragndrop))
				set_control_par(get_ui_id($label__dragndrop),$CONTROL_PAR_WIDTH,(88+2)*4 - 2)
				set_control_par(get_ui_id ($label__dragndrop),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__dragndrop),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__dragndrop),$CONTROL_PAR_TEXT, " d r a g  a n d  d r o p :")
				set_control_par_str(get_ui_id ($label__dragndrop),$CONTROL_PAR_HELP, "Drag and drop sample to load it.")

			    declare ui_waveform $Waveform (5, 4)
					set_control_par(get_ui_id($Waveform),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_dragndrop))
						set_control_par(get_ui_id ($Waveform),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($Waveform),$CONTROL_PAR_POS_Y,18)
						set_control_par(get_ui_id ($Waveform),$CONTROL_PAR_HEIGHT,40)
						set_control_par(get_ui_id ($Waveform),$CONTROL_PAR_WIDTH,358)
			   		attach_zone($Waveform, 0, 0)

			    declare ui_mouse_area $drop_area
					set_control_par(get_ui_id($drop_area),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_dragndrop))
				    set_control_par(get_ui_id($drop_area), $CONTROL_PAR_DND_ACCEPT_AUDIO, $NI_DND_ACCEPT_ONE)
				    set_control_par(get_ui_id($drop_area), $CONTROL_PAR_DND_ACCEPT_ARRAY, $NI_DND_ACCEPT_ONE)
					set_control_par(get_ui_id ($drop_area),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($drop_area),$CONTROL_PAR_POS_Y,0)
				    set_control_par(get_ui_id($drop_area), $CONTROL_PAR_WIDTH, 358)
				    set_control_par(get_ui_id($drop_area), $CONTROL_PAR_HEIGHT, 50)
				    set_control_par(get_ui_id($drop_area), $CONTROL_PAR_RECEIVE_DRAG_EVENTS, 1)

				declare ~automatic_pitch_detection_result
				declare $switch__dnd_automatic_root_setting := 1
				declare $switch__loop_not_oneshot := 0

				{
				declare ui_switch $switch__loop_not_oneshot
					set_control_par(get_ui_id($switch__loop_not_oneshot),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__sample_controls))
					set_control_par_str(get_ui_id($switch__loop_not_oneshot),$CONTROL_PAR_AUTOMATION_NAME,"loop_sample")
					set_control_par(get_ui_id($switch__loop_not_oneshot),$CONTROL_PAR_WIDTH,40)
					set_control_par(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_TEXT, "loop mode")
					set_control_par_str(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_HELP, "Chooses between oneshot and loop playback mode.")
					set_control_par(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_VALUE, 1)
					set_control_par(get_ui_id($switch__loop_not_oneshot), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch__loop_not_oneshot)
					read_persistent_var($switch__loop_not_oneshot)
					select ($switch__loop_not_oneshot)
						case 0
							set_control_par_str(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_TEXT, "[ oneshot ]")
						case 1
							set_control_par_str(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_TEXT, "[ loop ]")
					end select
				}
				{
				declare ui_switch $switch__dnd_automatic_root_setting
					set_control_par(get_ui_id($switch__dnd_automatic_root_setting),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__sample_controls))
					set_control_par_str(get_ui_id($switch__dnd_automatic_root_setting),$CONTROL_PAR_AUTOMATION_NAME,"automatic_root_setting")
					set_control_par(get_ui_id($switch__dnd_automatic_root_setting),$CONTROL_PAR_WIDTH,40)
					set_control_par(get_ui_id ($switch__dnd_automatic_root_setting),$CONTROL_PAR_POS_X, (88 + 2) * 3)
					set_control_par(get_ui_id ($switch__dnd_automatic_root_setting),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($switch__dnd_automatic_root_setting),$CONTROL_PAR_TEXT, "pitch detection")
					set_control_par_str(get_ui_id ($switch__dnd_automatic_root_setting),$CONTROL_PAR_HELP, "Turns on the option for automatic pitch detection and root setting of drag-n-dropped samples.")
					set_control_par(get_ui_id ($switch__dnd_automatic_root_setting),$CONTROL_PAR_VALUE, 1)
					set_control_par(get_ui_id($switch__dnd_automatic_root_setting), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($switch__dnd_automatic_root_setting),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch__dnd_automatic_root_setting)
					read_persistent_var($switch__dnd_automatic_root_setting)
					select ($switch__dnd_automatic_root_setting)
						case 0
							set_control_par_str(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_TEXT, "[ manual root setup ]")
						case 1
							set_control_par_str(get_ui_id ($switch__loop_not_oneshot),$CONTROL_PAR_TEXT, "[ automatic root setup ]")
					end select
				}



	if (1=1)
	end if

	if (1=1)
			declare ui_panel $panel__ahdsr
				set_control_par(get_ui_id($panel__ahdsr),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__sample_controls))
				set_control_par(get_ui_id ($panel__ahdsr),$CONTROL_PAR_POS_X,128)
				set_control_par(get_ui_id ($panel__ahdsr),$CONTROL_PAR_POS_Y,80)
				declare const $ahdsr_panel_cezura_placement := 78
				declare const $ahdsr_panel_cezura_width := 2
				declare const $ahdsr_panel_row_size := 18
				declare const $ahdsr_panel_text_alignment := 0
				declare @ahdsr_panel_white_space
					@ahdsr_panel_white_space := " "

				declare ui_label $label__ahdsr(1,1)
					set_control_par(get_ui_id($label__ahdsr),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par(get_ui_id($label__ahdsr),$CONTROL_PAR_WIDTH, $ahdsr_panel_cezura_placement + $slider_width)
					set_control_par(get_ui_id ($label__ahdsr),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label__ahdsr),$CONTROL_PAR_POS_Y,0)
					set_control_par_str(get_ui_id ($label__ahdsr),$CONTROL_PAR_TEXT, @ahdsr_panel_white_space & "v o l u m e  e n v e l o p e :")
					set_control_par_str(get_ui_id ($label__ahdsr),$CONTROL_PAR_HELP, "ahdsr volume envelope controls")
					set_control_par(get_ui_id ($label__ahdsr),$CONTROL_PAR_TEXT_ALIGNMENT, $ahdsr_panel_text_alignment)


				declare ui_label $label__ahdsr_atk_curve(1,1)
					set_control_par(get_ui_id($label__ahdsr_atk_curve),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par(get_ui_id($label__ahdsr_atk_curve),$CONTROL_PAR_WIDTH, $ahdsr_panel_cezura_placement - $ahdsr_panel_cezura_width)
					set_control_par(get_ui_id ($label__ahdsr_atk_curve),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__ahdsr_atk_curve),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 0))
					set_control_par_str(get_ui_id ($label__ahdsr_atk_curve),$CONTROL_PAR_TEXT, @ahdsr_panel_white_space & "attack curve :")
					set_control_par_str(get_ui_id ($label__ahdsr_atk_curve),$CONTROL_PAR_HELP, "ahdsr volume envelope: attack curve shape.")
					set_control_par(get_ui_id ($label__ahdsr_atk_curve),$CONTROL_PAR_TEXT_ALIGNMENT, $ahdsr_panel_text_alignment)

				declare ui_slider $slider_ahdsr_atk_curve(-100,100)
					set_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par_str(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_AUTOMATION_NAME,"ahdsr_atk_curve")
					set_control_par(get_ui_id ($slider_ahdsr_atk_curve),$CONTROL_PAR_POS_X, $ahdsr_panel_cezura_placement)
					set_control_par(get_ui_id ($slider_ahdsr_atk_curve),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 0) + 1)
					set_control_par_str(get_ui_id ($slider_ahdsr_atk_curve),$CONTROL_PAR_HELP, "ahdsr volume envelope: attack curve shape.")
					set_control_par(get_ui_id ($slider_ahdsr_atk_curve),$CONTROL_PAR_VALUE, (get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MAX_VALUE) - ((get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MIN_VALUE) ) / 2) ))
					set_control_par(get_ui_id ($slider_ahdsr_atk_curve),$CONTROL_PAR_DEFAULT_VALUE, (get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MAX_VALUE) - ((get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MIN_VALUE) ) / 2) ))
					make_persistent($slider_ahdsr_atk_curve)
					read_persistent_var($slider_ahdsr_atk_curve)
					declare $calc_slider_ahdsr_atk_curve
					$calc_slider_ahdsr_atk_curve := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MIN_VALUE)) )
					$iter := 0
					while ($iter < $NUM_GROUPS)
						set_engine_par($ENGINE_PAR_ATK_CURVE, $calc_slider_ahdsr_atk_curve, $iter, find_mod($iter, "ENV_AHDSR"), -1)
						inc($iter)
					end while

				declare ui_label $label__ahdsr_attack(1,1)
					set_control_par(get_ui_id($label__ahdsr_attack),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par(get_ui_id($label__ahdsr_attack),$CONTROL_PAR_WIDTH, $ahdsr_panel_cezura_placement - $ahdsr_panel_cezura_width)
					set_control_par(get_ui_id ($label__ahdsr_attack),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__ahdsr_attack),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 1))
					set_control_par_str(get_ui_id ($label__ahdsr_attack),$CONTROL_PAR_TEXT, @ahdsr_panel_white_space & "A t t a c k :")
					set_control_par_str(get_ui_id ($label__ahdsr_attack),$CONTROL_PAR_HELP, "ahdsr volume envelope: attack time.")
					set_control_par(get_ui_id ($label__ahdsr_attack),$CONTROL_PAR_TEXT_ALIGNMENT, $ahdsr_panel_text_alignment)

				declare ui_slider $slider_ahdsr_attack(0,127)
					set_control_par(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par_str(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_AUTOMATION_NAME,"ahdsr_attack")
					set_control_par(get_ui_id ($slider_ahdsr_attack),$CONTROL_PAR_POS_X, $ahdsr_panel_cezura_placement)
					set_control_par(get_ui_id ($slider_ahdsr_attack),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 1) + 1)
					set_control_par_str(get_ui_id ($slider_ahdsr_attack),$CONTROL_PAR_HELP, "ahdsr volume envelope: attack time.")
					set_control_par(get_ui_id ($slider_ahdsr_attack),$CONTROL_PAR_VALUE, get_control_par(get_ui_id ($slider_ahdsr_attack),$CONTROL_PAR_MAX_VALUE))
					set_control_par(get_ui_id ($slider_ahdsr_attack),$CONTROL_PAR_DEFAULT_VALUE, get_control_par(get_ui_id ($slider_ahdsr_attack),$CONTROL_PAR_MAX_VALUE))
					make_persistent($slider_ahdsr_attack)
					read_persistent_var($slider_ahdsr_attack)
					declare $calc_slider_ahdsr_attack
					$calc_slider_ahdsr_attack := 1000000 - (1000000 * (get_control_par(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_MIN_VALUE)) )
					$iter := 0
					while ($iter < $NUM_GROUPS)
						set_engine_par($ENGINE_PAR_ATTACK, $calc_slider_ahdsr_attack, $iter, find_mod($iter, "ENV_AHDSR"), -1)
						inc($iter)
					end while

				declare ui_label $label__ahdsr_hold(1,1)
					set_control_par(get_ui_id($label__ahdsr_hold),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par(get_ui_id($label__ahdsr_hold),$CONTROL_PAR_WIDTH, $ahdsr_panel_cezura_placement - $ahdsr_panel_cezura_width)
					set_control_par(get_ui_id ($label__ahdsr_hold),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__ahdsr_hold),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 2))
					set_control_par_str(get_ui_id ($label__ahdsr_hold),$CONTROL_PAR_TEXT, @ahdsr_panel_white_space & "H o l d :")
					set_control_par_str(get_ui_id ($label__ahdsr_hold),$CONTROL_PAR_HELP, "ahdsr volume envelope: hold time.")
					set_control_par(get_ui_id ($label__ahdsr_hold),$CONTROL_PAR_TEXT_ALIGNMENT, $ahdsr_panel_text_alignment)

				declare ui_slider $slider_ahdsr_hold(0,127)
					set_control_par(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par_str(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_AUTOMATION_NAME,"ahdsr_hold")
					set_control_par(get_ui_id ($slider_ahdsr_hold),$CONTROL_PAR_POS_X, $ahdsr_panel_cezura_placement)
					set_control_par(get_ui_id ($slider_ahdsr_hold),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 2) + 1)
					set_control_par_str(get_ui_id ($slider_ahdsr_hold),$CONTROL_PAR_HELP, "ahdsr volume envelope: hold time.")
					set_control_par(get_ui_id ($slider_ahdsr_hold),$CONTROL_PAR_VALUE, get_control_par(get_ui_id ($slider_ahdsr_hold),$CONTROL_PAR_MIN_VALUE))
					set_control_par(get_ui_id ($slider_ahdsr_hold),$CONTROL_PAR_DEFAULT_VALUE, get_control_par(get_ui_id ($slider_ahdsr_hold),$CONTROL_PAR_MIN_VALUE))
					make_persistent($slider_ahdsr_hold)
					read_persistent_var($slider_ahdsr_hold)
					declare $calc_slider_ahdsr_hold
					$calc_slider_ahdsr_hold := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_MIN_VALUE)) )
					$iter := 0
					while ($iter < $NUM_GROUPS)
						set_engine_par($ENGINE_PAR_HOLD, $calc_slider_ahdsr_hold, $iter, find_mod($iter, "ENV_AHDSR"), -1)
						inc($iter)
					end while

				declare ui_label $label__ahdsr_decay(1,1)
					set_control_par(get_ui_id($label__ahdsr_decay),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par(get_ui_id($label__ahdsr_decay),$CONTROL_PAR_WIDTH, $ahdsr_panel_cezura_placement - $ahdsr_panel_cezura_width)
					set_control_par(get_ui_id ($label__ahdsr_decay),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__ahdsr_decay),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 3))
					set_control_par_str(get_ui_id ($label__ahdsr_decay),$CONTROL_PAR_TEXT, @ahdsr_panel_white_space & "D e c a y :")
					set_control_par_str(get_ui_id ($label__ahdsr_decay),$CONTROL_PAR_HELP, "ahdsr volume envelope: decay time.")
					set_control_par(get_ui_id ($label__ahdsr_decay),$CONTROL_PAR_TEXT_ALIGNMENT, $ahdsr_panel_text_alignment)

				declare ui_slider $slider_ahdsr_decay(0,127)
					set_control_par(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par_str(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_AUTOMATION_NAME,"ahdsr_decay")
					set_control_par(get_ui_id ($slider_ahdsr_decay),$CONTROL_PAR_POS_X, $ahdsr_panel_cezura_placement)
					set_control_par(get_ui_id ($slider_ahdsr_decay),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 3) + 1)
					set_control_par_str(get_ui_id ($slider_ahdsr_decay),$CONTROL_PAR_HELP, "ahdsr volume envelope: decay time.")
					set_control_par(get_ui_id ($slider_ahdsr_decay),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($slider_ahdsr_decay),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($slider_ahdsr_decay)
					read_persistent_var($slider_ahdsr_decay)
					declare $calc_slider_ahdsr_decay
					$calc_slider_ahdsr_decay := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_MIN_VALUE)) )
					$iter := 0
					while ($iter < $NUM_GROUPS)
						set_engine_par($ENGINE_PAR_DECAY, $calc_slider_ahdsr_decay, $iter, find_mod($iter, "ENV_AHDSR"), -1)
						inc($iter)
					end while

				declare ui_label $label__ahdsr_sustain(1,1)
					set_control_par(get_ui_id($label__ahdsr_sustain),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par(get_ui_id($label__ahdsr_sustain),$CONTROL_PAR_WIDTH, $ahdsr_panel_cezura_placement - $ahdsr_panel_cezura_width)
					set_control_par(get_ui_id ($label__ahdsr_sustain),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__ahdsr_sustain),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 4))
					set_control_par_str(get_ui_id ($label__ahdsr_sustain),$CONTROL_PAR_TEXT, @ahdsr_panel_white_space & "S u s t a i n :")
					set_control_par_str(get_ui_id ($label__ahdsr_sustain),$CONTROL_PAR_HELP, "ahdsr volume envelope: sustain attenuation value")
					set_control_par(get_ui_id ($label__ahdsr_sustain),$CONTROL_PAR_TEXT_ALIGNMENT, $ahdsr_panel_text_alignment)

				declare ui_slider $slider_ahdsr_sustain(0,127)
					set_control_par(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par_str(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_AUTOMATION_NAME,"ahdsr_sustain")
					set_control_par(get_ui_id ($slider_ahdsr_sustain),$CONTROL_PAR_POS_X, $ahdsr_panel_cezura_placement)
					set_control_par(get_ui_id ($slider_ahdsr_sustain),$CONTROL_PAR_POS_Y,22 + ($ahdsr_panel_row_size * 4) + 1)
					set_control_par_str(get_ui_id ($slider_ahdsr_sustain),$CONTROL_PAR_HELP, "ahdsr volume envelope: sustain attenuation value.")
					set_control_par(get_ui_id ($slider_ahdsr_sustain),$CONTROL_PAR_VALUE, 127)
					set_control_par(get_ui_id ($slider_ahdsr_sustain),$CONTROL_PAR_DEFAULT_VALUE, get_control_par(get_ui_id ($slider_ahdsr_sustain),$CONTROL_PAR_MAX_VALUE))
					make_persistent($slider_ahdsr_sustain)
					read_persistent_var($slider_ahdsr_sustain)
					declare $calc_slider_ahdsr_sustain
					$calc_slider_ahdsr_sustain := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_MIN_VALUE)) )
					$iter := 0
					while ($iter < $NUM_GROUPS)
						set_engine_par($ENGINE_PAR_SUSTAIN, $calc_slider_ahdsr_sustain, $iter, find_mod($iter, "ENV_AHDSR"), -1)
						inc($iter)
					end while
					

				declare ui_label $label__ahdsr_release(1,1)
					set_control_par(get_ui_id($label__ahdsr_release),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par(get_ui_id($label__ahdsr_release),$CONTROL_PAR_WIDTH, $ahdsr_panel_cezura_placement - $ahdsr_panel_cezura_width)
					set_control_par(get_ui_id ($label__ahdsr_release),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__ahdsr_release),$CONTROL_PAR_POS_Y, 22 + ($ahdsr_panel_row_size * 5))
					set_control_par_str(get_ui_id ($label__ahdsr_release),$CONTROL_PAR_TEXT, @ahdsr_panel_white_space & "R e l e a s e :")
					set_control_par_str(get_ui_id ($label__ahdsr_release),$CONTROL_PAR_HELP, "ahdsr volume envelope: release time")
					set_control_par(get_ui_id ($label__ahdsr_release),$CONTROL_PAR_TEXT_ALIGNMENT, $ahdsr_panel_text_alignment)

				declare ui_slider $slider_ahdsr_release(0,127)
					set_control_par(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__ahdsr))
					set_control_par_str(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_AUTOMATION_NAME,"ahdsr_release")
					set_control_par(get_ui_id ($slider_ahdsr_release),$CONTROL_PAR_POS_X, $ahdsr_panel_cezura_placement)
					set_control_par(get_ui_id ($slider_ahdsr_release),$CONTROL_PAR_POS_Y,22 + ($ahdsr_panel_row_size * 5) + 1)
					set_control_par_str(get_ui_id ($slider_ahdsr_release),$CONTROL_PAR_HELP, "ahdsr volume envelope: release value.")
					set_control_par(get_ui_id ($slider_ahdsr_release),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($slider_ahdsr_release),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($slider_ahdsr_release)
					read_persistent_var($slider_ahdsr_release)
					declare $calc_slider_ahdsr_release
					$calc_slider_ahdsr_release := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_MIN_VALUE)) )
					$iter := 0
					while ($iter < $NUM_GROUPS)
						set_engine_par($ENGINE_PAR_RELEASE, $calc_slider_ahdsr_release, $iter, find_mod($iter, "ENV_AHDSR"), -1)
						inc($iter)
					end while



			declare ui_panel $panel__glide_pitch_mod
				set_control_par(get_ui_id($panel__glide_pitch_mod),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__sample_controls))
				set_control_par(get_ui_id ($panel__glide_pitch_mod),$CONTROL_PAR_POS_X,128)
				set_control_par(get_ui_id ($panel__glide_pitch_mod),$CONTROL_PAR_POS_Y,220)
				declare const $glide_pitch_panel_cezura_placement := 78
				declare const $glide_pitch_panel_space_width := 2
				declare const $glide_pitch_panel_row_size := 18
				declare @glide_pitch_panel_white_space
					@glide_pitch_panel_white_space := " "

				declare ui_label $label__glide_pitch(1,1)
					set_control_par(get_ui_id($label__glide_pitch),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__glide_pitch_mod))
					set_control_par(get_ui_id($label__glide_pitch),$CONTROL_PAR_WIDTH, $glide_pitch_panel_cezura_placement - $glide_pitch_panel_space_width)
					set_control_par(get_ui_id ($label__glide_pitch),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label__glide_pitch),$CONTROL_PAR_POS_Y,0)
					set_control_par_str(get_ui_id ($label__glide_pitch),$CONTROL_PAR_TEXT, @glide_pitch_panel_white_space & "g l i d e :")
					set_control_par_str(get_ui_id ($label__glide_pitch),$CONTROL_PAR_HELP, "glissando transition between the notes")
					set_control_par(get_ui_id ($label__glide_pitch),$CONTROL_PAR_TEXT_ALIGNMENT, 0)

					{
				declare ui_switch $switch_glide_pitch_mode
					set_control_par(get_ui_id($switch_glide_pitch_mode),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__glide_pitch_mod))
					set_control_par_str(get_ui_id($switch_glide_pitch_mode),$CONTROL_PAR_AUTOMATION_NAME,"glide_pitch_equal_time")
					set_control_par(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_POS_X, $glide_pitch_panel_space_width)
					set_control_par(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_POS_Y, 1)
					set_control_par_str(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_TEXT, "glide mode")
					set_control_par_str(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_HELP, "Sets the behaviour of the glide modulator: if set to 1 all note transitions have equal duration. If set to 0, wider intervals will have longer transitions than the shorter ones.")
					set_control_par(get_ui_id($switch_glide_pitch_mode),$CONTROL_PAR_WIDTH, $glide_pitch_panel_cezura_placement - ($glide_pitch_panel_space_width*2))
					set_control_par(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch_glide_pitch_mode)
					read_persistent_var($switch_glide_pitch_mode)
					select ($switch_glide_pitch_mode)
						case 0
							set_control_par_str(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_TEXT, "[ speed ]")
						case 1
							set_control_par_str(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_TEXT, "[ time ]")
					end select
					$iter := 0
					while ($iter < $NUM_GROUPS)
						set_engine_par($ENGINE_PAR_GLIDE_COEF_UNIT, $switch_glide_pitch_mode, $iter, find_mod($iter, "GLIDE"), -1)
						inc($iter)
					end while
					}

				declare ui_slider $slider_glide_pitch_value(0,127)
					set_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__glide_pitch_mod))
					set_control_par_str(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_AUTOMATION_NAME,"portamento_time")
					set_control_par(get_ui_id ($slider_glide_pitch_value),$CONTROL_PAR_POS_X, $glide_pitch_panel_cezura_placement)
					set_control_par(get_ui_id ($slider_glide_pitch_value),$CONTROL_PAR_POS_Y, 0)
					set_control_par_str(get_ui_id ($slider_glide_pitch_value),$CONTROL_PAR_HELP, "Sets the duration of glissandos between pitches.")
					set_control_par(get_ui_id ($slider_glide_pitch_value),$CONTROL_PAR_VALUE, (get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MAX_VALUE) - ((get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MIN_VALUE) ) / 2) ))
					set_control_par(get_ui_id ($slider_glide_pitch_value),$CONTROL_PAR_DEFAULT_VALUE, (get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MAX_VALUE) - ((get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MIN_VALUE) ) / 2) ))
					make_persistent($slider_glide_pitch_value)
					read_persistent_var($slider_glide_pitch_value)
					declare $calc_slider_glide_pitch_value
					$calc_slider_glide_pitch_value := (1000000 * (get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MIN_VALUE)) )
					$iter := 0
					while ($iter < $NUM_GROUPS)
						set_engine_par($ENGINE_PAR_GLIDE_COEF, $calc_slider_glide_pitch_value, $iter, find_mod($iter, "GLIDE"), -1)
						inc($iter)
					end while


				declare ui_label $label__thriller_glide(1,1)
					set_control_par(get_ui_id($label__thriller_glide),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__glide_pitch_mod))
					set_control_par(get_ui_id($label__thriller_glide),$CONTROL_PAR_WIDTH, $glide_pitch_panel_cezura_placement + $slider_width - $glide_pitch_panel_space_width - 40)
					set_control_par(get_ui_id ($label__thriller_glide),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__thriller_glide),$CONTROL_PAR_POS_Y, ($glide_pitch_panel_row_size * 1))
					set_control_par_str(get_ui_id ($label__thriller_glide),$CONTROL_PAR_TEXT, @glide_pitch_panel_white_space & "t h r i l l e r  a t k :")
					set_control_par_str(get_ui_id ($label__thriller_glide),$CONTROL_PAR_HELP, "hello, my name is leg legato")
					set_control_par(get_ui_id ($label__thriller_glide),$CONTROL_PAR_TEXT_ALIGNMENT, 0)

				declare ui_switch $switch_glide_legato_only
					set_control_par(get_ui_id($switch_glide_legato_only),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__glide_pitch_mod))
					set_control_par_str(get_ui_id($switch_glide_legato_only),$CONTROL_PAR_AUTOMATION_NAME,"thriller_glide")
					set_control_par(get_ui_id($switch_glide_legato_only),$CONTROL_PAR_WIDTH, 40)
					set_control_par(get_ui_id ($switch_glide_legato_only),$CONTROL_PAR_POS_X, $glide_pitch_panel_cezura_placement + $slider_width - 40)
					set_control_par(get_ui_id ($switch_glide_legato_only),$CONTROL_PAR_POS_Y, ($glide_pitch_panel_row_size * 1))
					set_control_par(get_ui_id($switch_glide_legato_only), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch_glide_legato_only),$CONTROL_PAR_HELP, "Toggles whether glide is applied to all notes or legato notes only.")
					set_control_par(get_ui_id ($switch_glide_legato_only),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch_glide_legato_only),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch_glide_legato_only)
					read_persistent_var($switch_glide_legato_only)
					select($switch_glide_legato_only)
						case 1
							set_control_par_str(get_ui_id ($switch_glide_legato_only),$CONTROL_PAR_TEXT, "[ ON ]")
						case 0
							set_control_par_str(get_ui_id ($switch_glide_legato_only),$CONTROL_PAR_TEXT, "[ off ]")
					end select




			declare ui_panel $panel__basic_filters
				set_control_par(get_ui_id($panel__basic_filters),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__sample_controls))
				set_control_par(get_ui_id ($panel__basic_filters),$CONTROL_PAR_POS_X,496)
				set_control_par(get_ui_id ($panel__basic_filters),$CONTROL_PAR_POS_Y,80)

			declare ui_label $label__basic_filters(1,1)
				set_control_par(get_ui_id($label__basic_filters),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__basic_filters))
				set_control_par(get_ui_id($label__basic_filters),$CONTROL_PAR_WIDTH,(88+2)*1-2)
				set_control_par(get_ui_id ($label__basic_filters),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__basic_filters),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__basic_filters),$CONTROL_PAR_TEXT, " f i l t e r s :")
				set_control_par_str(get_ui_id ($label__basic_filters),$CONTROL_PAR_HELP, "Basic low-pass and high-pass filter.")

				declare ui_knob $knob_filter_hp(0,127,1)
					set_control_par(get_ui_id($knob_filter_hp),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__basic_filters))
					set_control_par_str(get_ui_id($knob_filter_hp),$CONTROL_PAR_AUTOMATION_NAME,"HP_filter")
					set_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_POS_Y, 22 + (44*0))
					set_control_par_str(get_ui_id ($knob_filter_hp),$CONTROL_PAR_TEXT, "   " & "HP")
					set_control_par_str(get_ui_id ($knob_filter_hp),$CONTROL_PAR_HELP, "High-pass filter cutoff frequency")
					set_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_filter_hp)
					read_persistent_var($knob_filter_hp)
					set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_MIN_VALUE)), -1, $mainfx_slot_num__sv_hp2, $NI_MAIN_BUS)

				declare ui_knob $knob_filter_lp(0,127,1)
					set_control_par(get_ui_id($knob_filter_lp),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__basic_filters))
					set_control_par_str(get_ui_id($knob_filter_lp),$CONTROL_PAR_AUTOMATION_NAME,"LP_filter")
					set_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_POS_Y,22 + (44*1))
					set_control_par_str(get_ui_id ($knob_filter_lp),$CONTROL_PAR_TEXT, "   " & "LP")
					set_control_par_str(get_ui_id ($knob_filter_lp),$CONTROL_PAR_HELP, "Low-pass filter cutoff frequency")
					set_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_filter_lp)
					read_persistent_var($knob_filter_lp)
					set_engine_par($ENGINE_PAR_CUTOFF, 1000000-(1000000 * (get_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_MIN_VALUE))), -1, $mainfx_slot_num__sv_lp2, $NI_MAIN_BUS)
	end if

	if (1=1)

			declare ui_panel $panel__groupnzone_settings
				set_control_par(get_ui_id($panel__groupnzone_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__sample_controls))
				set_control_par(get_ui_id ($panel__groupnzone_settings),$CONTROL_PAR_POS_X,310)
				set_control_par(get_ui_id ($panel__groupnzone_settings),$CONTROL_PAR_POS_Y,220)

			declare ui_label $label__groupnzone_settings(1,1)
				set_control_par(get_ui_id($label__groupnzone_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__groupnzone_settings))
				set_control_par(get_ui_id($label__groupnzone_settings),$CONTROL_PAR_WIDTH,(88+2)*3 - 2)
				set_control_par(get_ui_id ($label__groupnzone_settings),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__groupnzone_settings),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__groupnzone_settings),$CONTROL_PAR_TEXT, " g r o u p s :")
				set_control_par_str(get_ui_id ($label__groupnzone_settings),$CONTROL_PAR_HELP, "Settings related to sample groups and key zones.")

			declare ui_knob $knob__allowed_group_with_lowest_idx(0,$NUM_GROUPS-1,1)
				set_control_par(get_ui_id($knob__allowed_group_with_lowest_idx),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__groupnzone_settings))
				set_control_par_str(get_ui_id($knob__allowed_group_with_lowest_idx),$CONTROL_PAR_AUTOMATION_NAME,"allowed_group_idx")
				set_control_par(get_ui_id ($knob__allowed_group_with_lowest_idx),$CONTROL_PAR_POS_X, (88+2)*0)
				set_control_par(get_ui_id ($knob__allowed_group_with_lowest_idx),$CONTROL_PAR_POS_Y, 22)
				set_control_par_str(get_ui_id ($knob__allowed_group_with_lowest_idx),$CONTROL_PAR_TEXT, " " & "group")
				set_control_par_str(get_ui_id ($knob__allowed_group_with_lowest_idx),$CONTROL_PAR_HELP, "Set the index of the first group that is allowed to be played.")
				set_control_par(get_ui_id ($knob__allowed_group_with_lowest_idx),$CONTROL_PAR_VALUE, 0)
				set_control_par(get_ui_id ($knob__allowed_group_with_lowest_idx),$CONTROL_PAR_DEFAULT_VALUE, 0)
				make_persistent($knob__allowed_group_with_lowest_idx)
				read_persistent_var($knob__allowed_group_with_lowest_idx)

			declare ui_knob $knob__num_of_allowed_groups(1,$NUM_GROUPS-1,1)
				set_control_par(get_ui_id($knob__num_of_allowed_groups),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__groupnzone_settings))
				set_control_par_str(get_ui_id($knob__num_of_allowed_groups),$CONTROL_PAR_AUTOMATION_NAME,"num_of_allowed_groups")
				set_control_par(get_ui_id ($knob__num_of_allowed_groups),$CONTROL_PAR_POS_X, (88+2)*1)
				set_control_par(get_ui_id ($knob__num_of_allowed_groups),$CONTROL_PAR_POS_Y, 22)
				set_control_par_str(get_ui_id ($knob__num_of_allowed_groups),$CONTROL_PAR_TEXT, "  " & "groups")
				set_control_par_str(get_ui_id ($knob__num_of_allowed_groups),$CONTROL_PAR_HELP, "Set how many sample groups are allowed starting from the given index.")
				set_control_par(get_ui_id ($knob__num_of_allowed_groups),$CONTROL_PAR_VALUE, 1)
				set_control_par(get_ui_id ($knob__num_of_allowed_groups),$CONTROL_PAR_DEFAULT_VALUE, 1)
				make_persistent($knob__num_of_allowed_groups)
				read_persistent_var($knob__num_of_allowed_groups)

			declare ui_knob $knob__release_group(-1,$NUM_GROUPS-1,1)
				set_control_par(get_ui_id($knob__release_group),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__groupnzone_settings))
				set_control_par_str(get_ui_id($knob__release_group),$CONTROL_PAR_AUTOMATION_NAME,"release_group")
				set_control_par(get_ui_id ($knob__release_group),$CONTROL_PAR_POS_X, (88+2)*2)
				set_control_par(get_ui_id ($knob__release_group),$CONTROL_PAR_POS_Y, 22)
				set_control_par_str(get_ui_id ($knob__release_group),$CONTROL_PAR_TEXT, "" & "rel. group")
				set_control_par_str(get_ui_id ($knob__release_group),$CONTROL_PAR_HELP, "Index of the release group. Don't use looped samples in the release group as they will cause hanging notes. This group should not have any modulator named ENV_AHDSR in it.")
				set_control_par(get_ui_id ($knob__release_group),$CONTROL_PAR_VALUE, -1)
				set_control_par(get_ui_id ($knob__release_group),$CONTROL_PAR_DEFAULT_VALUE, -1)
				make_persistent($knob__release_group)
				read_persistent_var($knob__release_group)
				if(get_control_par(get_ui_id ($knob__release_group),$CONTROL_PAR_VALUE) = -1)
					set_knob_label($knob__release_group, "   " & "none")
				else
					set_knob_label($knob__release_group, "    " & get_control_par(get_ui_id ($knob__release_group),$CONTROL_PAR_VALUE))
				end if
				declare $release_callback_id



			declare ui_knob $knob__zone_shift(-63,64,1)
				set_control_par(get_ui_id($knob__zone_shift),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__sample_controls))
				set_control_par_str(get_ui_id($knob__zone_shift),$CONTROL_PAR_AUTOMATION_NAME,"zone_shift")
				set_control_par(get_ui_id ($knob__zone_shift),$CONTROL_PAR_POS_X, 496)
				set_control_par(get_ui_id ($knob__zone_shift),$CONTROL_PAR_POS_Y, 34)
				set_control_par_str(get_ui_id ($knob__zone_shift),$CONTROL_PAR_TEXT, "" & "zone shift")
				set_control_par_str(get_ui_id ($knob__zone_shift),$CONTROL_PAR_HELP, "Zone shifter - transpose and pitch shift notes to play different zones. This option affects the playback only in multi-sampled instruments.")
				set_control_par(get_ui_id ($knob__zone_shift),$CONTROL_PAR_VALUE, 0)
				set_control_par(get_ui_id ($knob__zone_shift),$CONTROL_PAR_DEFAULT_VALUE, 0)
				make_persistent($knob__zone_shift)
				read_persistent_var($knob__zone_shift)


			declare ui_panel $panel__dynamics
				set_control_par(get_ui_id($panel__dynamics),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__sample_controls))
				set_control_par(get_ui_id ($panel__dynamics),$CONTROL_PAR_POS_X,310)
				set_control_par(get_ui_id ($panel__dynamics),$CONTROL_PAR_POS_Y,80)
				declare const $dynamics_panel_cezura_placement := 88
				declare const $dynamics_panel_cezura_width := 2
				declare const $dynamics_panel_row_height := 18
				declare const $dynamics_panel_text_alignment := 0
				declare @dynamics_panel_white_space
					@dynamics_panel_white_space := " "

				declare ui_label $label__dynamics_panel(1,1)
					set_control_par(get_ui_id($label__dynamics_panel),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
					set_control_par(get_ui_id($label__dynamics_panel),$CONTROL_PAR_WIDTH, $dynamics_panel_cezura_placement + $slider_width)
					set_control_par(get_ui_id ($label__dynamics_panel),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label__dynamics_panel),$CONTROL_PAR_POS_Y,0)
					set_control_par_str(get_ui_id ($label__dynamics_panel),$CONTROL_PAR_TEXT, @dynamics_panel_white_space & "d y n a m i c s :")
					set_control_par_str(get_ui_id ($label__dynamics_panel),$CONTROL_PAR_HELP, "dynamics controls")
					set_control_par(get_ui_id ($label__dynamics_panel),$CONTROL_PAR_TEXT_ALIGNMENT, $dynamics_panel_text_alignment)


				declare ui_label $label__compression_amount(1,1)
					set_control_par(get_ui_id($label__compression_amount),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
					set_control_par(get_ui_id($label__compression_amount),$CONTROL_PAR_WIDTH, $dynamics_panel_cezura_placement - $dynamics_panel_cezura_width)
					set_control_par(get_ui_id ($label__compression_amount),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__compression_amount),$CONTROL_PAR_POS_Y, 22 + ($dynamics_panel_row_height * 0))
					set_control_par_str(get_ui_id ($label__compression_amount),$CONTROL_PAR_TEXT, @dynamics_panel_white_space & "c o m p r e s s :")
					set_control_par_str(get_ui_id ($label__compression_amount),$CONTROL_PAR_HELP, "ahdsr volume envelope: attack curve shape.")
					set_control_par(get_ui_id ($label__compression_amount),$CONTROL_PAR_TEXT_ALIGNMENT, $dynamics_panel_text_alignment)
				
				declare ui_slider $slider__compression_amount(0,127)
					set_control_par(get_ui_id($slider__compression_amount),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
					set_control_par_str(get_ui_id($slider__compression_amount),$CONTROL_PAR_AUTOMATION_NAME,"compression_amount")
					set_control_par(get_ui_id ($slider__compression_amount),$CONTROL_PAR_POS_X, $dynamics_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__compression_amount),$CONTROL_PAR_POS_Y, 22 + ($dynamics_panel_row_height * 0) + 1)
					set_control_par_str(get_ui_id ($slider__compression_amount),$CONTROL_PAR_TEXT, "" & "compression")
					set_control_par_str(get_ui_id ($slider__compression_amount),$CONTROL_PAR_HELP, "Simple one-knob compression.")
					set_control_par(get_ui_id ($slider__compression_amount),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($slider__compression_amount),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($slider__compression_amount)
					read_persistent_var($slider__compression_amount)
					set_engine_par($ENGINE_PAR_SCOMP_THRESHOLD, 500000 - (($slider__compression_amount + 1) * 500000 / 128), -1, $mainfx_slot_num__solid_bus_compressor, $NI_MAIN_BUS)
					set_engine_par($ENGINE_PAR_SCOMP_MAKEUP, (1000000/5) + ((($slider__compression_amount + 1) * (1000000*4/5) / 128)*12/20), -1, $mainfx_slot_num__solid_bus_compressor, $NI_MAIN_BUS)


				declare ui_label $label__smooth_atk(1,1)
					set_control_par(get_ui_id($label__smooth_atk),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
					set_control_par(get_ui_id($label__smooth_atk),$CONTROL_PAR_WIDTH, $dynamics_panel_cezura_placement + $slider_width - $dynamics_panel_cezura_width - 40)
					set_control_par(get_ui_id ($label__smooth_atk),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__smooth_atk),$CONTROL_PAR_POS_Y, 22 + ($dynamics_panel_row_height * 1))
					set_control_par_str(get_ui_id ($label__smooth_atk),$CONTROL_PAR_TEXT, @dynamics_panel_white_space & "s m o o t h  a t t a c k :")
					set_control_par_str(get_ui_id ($label__smooth_atk),$CONTROL_PAR_HELP, "soften transients")
					set_control_par(get_ui_id ($label__smooth_atk),$CONTROL_PAR_TEXT_ALIGNMENT, $dynamics_panel_text_alignment)

				declare ui_switch $switch__smooth_attack
					set_control_par(get_ui_id($switch__smooth_attack),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
					set_control_par_str(get_ui_id($switch__smooth_attack),$CONTROL_PAR_AUTOMATION_NAME,"smooth_attack")
					set_control_par(get_ui_id($switch__smooth_attack),$CONTROL_PAR_WIDTH, 40)
					set_control_par(get_ui_id ($switch__smooth_attack),$CONTROL_PAR_POS_X, $dynamics_panel_cezura_placement + $slider_width - 40)
					set_control_par(get_ui_id ($switch__smooth_attack),$CONTROL_PAR_POS_Y, 22 + ($dynamics_panel_row_height * 1))
					set_control_par_str(get_ui_id ($switch__smooth_attack),$CONTROL_PAR_TEXT, "soften")
					set_control_par(get_ui_id($switch__smooth_attack), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch__smooth_attack),$CONTROL_PAR_HELP, "softens the attack of the sample")
					set_control_par(get_ui_id ($switch__smooth_attack),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch__smooth_attack),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch__smooth_attack)
					read_persistent_var($switch__smooth_attack)
					select($switch__smooth_attack)
						case 1
							set_control_par_str(get_ui_id ($switch__smooth_attack),$CONTROL_PAR_TEXT, "[ ON ]")
						case 0
							set_control_par_str(get_ui_id ($switch__smooth_attack),$CONTROL_PAR_TEXT, "[ off ]")
					end select
					set_engine_par($ENGINE_PAR_TR_SMOOTH, $switch__smooth_attack, -1, $mainfx_slot_num__transient_master, $NI_MAIN_BUS)

				declare ui_label $label__transient_strength(1,1)
					set_control_par(get_ui_id($label__transient_strength),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
					set_control_par(get_ui_id($label__transient_strength),$CONTROL_PAR_WIDTH, $dynamics_panel_cezura_placement - $dynamics_panel_cezura_width)
					set_control_par(get_ui_id ($label__transient_strength),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__transient_strength),$CONTROL_PAR_POS_Y, 22 + ($dynamics_panel_row_height * 2))
					set_control_par_str(get_ui_id ($label__transient_strength),$CONTROL_PAR_TEXT, @dynamics_panel_white_space & "t r a n s i e n t s:")
					set_control_par_str(get_ui_id ($label__transient_strength),$CONTROL_PAR_HELP, "enhances the attack of the sample")
					set_control_par(get_ui_id ($label__transient_strength),$CONTROL_PAR_TEXT_ALIGNMENT, $dynamics_panel_text_alignment)

				declare ui_slider $slider__dynamics_transient_strength(-100,100)
					set_control_par(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
					set_control_par_str(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_AUTOMATION_NAME,"transient_strength")
					set_control_par(get_ui_id ($slider__dynamics_transient_strength),$CONTROL_PAR_POS_X, $dynamics_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__dynamics_transient_strength),$CONTROL_PAR_POS_Y, 22 + ($dynamics_panel_row_height * 2) + 1)
					set_control_par_str(get_ui_id ($slider__dynamics_transient_strength),$CONTROL_PAR_TEXT, "" & "transients :")
					set_control_par_str(get_ui_id ($slider__dynamics_transient_strength),$CONTROL_PAR_HELP, "enhances the attack of the sample")
					set_control_par(get_ui_id ($slider__dynamics_transient_strength),$CONTROL_PAR_VALUE, 3)
					set_control_par(get_ui_id ($slider__dynamics_transient_strength),$CONTROL_PAR_DEFAULT_VALUE, 1)
					make_persistent($slider__dynamics_transient_strength)
					read_persistent_var($slider__dynamics_transient_strength)
					declare $calc_dynamics_transient_strength
					$calc_dynamics_transient_strength := (1000000 * (get_control_par(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_MIN_VALUE)) )
					set_engine_par($ENGINE_PAR_TR_ATTACK, $calc_dynamics_transient_strength, -1, $mainfx_slot_num__transient_master, $NI_MAIN_BUS)

				declare ui_label $label__sustain_strength(1,1)
					set_control_par(get_ui_id($label__sustain_strength),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
					set_control_par(get_ui_id($label__sustain_strength),$CONTROL_PAR_WIDTH, $dynamics_panel_cezura_placement - $dynamics_panel_cezura_width)
					set_control_par(get_ui_id ($label__sustain_strength),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__sustain_strength),$CONTROL_PAR_POS_Y, 22 + ($dynamics_panel_row_height * 3))
					set_control_par_str(get_ui_id ($label__sustain_strength),$CONTROL_PAR_TEXT, @dynamics_panel_white_space & "s u s t a i n :")
					set_control_par_str(get_ui_id ($label__sustain_strength),$CONTROL_PAR_HELP, "ahdsr volume envelope: attack curve shape.")
					set_control_par(get_ui_id ($label__sustain_strength),$CONTROL_PAR_TEXT_ALIGNMENT, $dynamics_panel_text_alignment)

				declare ui_slider $slider__dynamics_sustain_strength(-100,100)
					set_control_par(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
					set_control_par_str(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_AUTOMATION_NAME,"sustain_strength")
					set_control_par(get_ui_id ($slider__dynamics_sustain_strength),$CONTROL_PAR_POS_X, $dynamics_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__dynamics_sustain_strength),$CONTROL_PAR_POS_Y, 22 + ($dynamics_panel_row_height * 3) + 1)
					set_control_par_str(get_ui_id ($slider__dynamics_sustain_strength),$CONTROL_PAR_TEXT, " " & "sustain")
					set_control_par_str(get_ui_id ($slider__dynamics_sustain_strength),$CONTROL_PAR_HELP, "enhances the sustain of the sample")
					set_control_par(get_ui_id ($slider__dynamics_sustain_strength),$CONTROL_PAR_VALUE, 100)
					set_control_par(get_ui_id ($slider__dynamics_sustain_strength),$CONTROL_PAR_DEFAULT_VALUE, 1)
					make_persistent($slider__dynamics_sustain_strength)
					read_persistent_var($slider__dynamics_sustain_strength)
					declare $calc_dynamics_sustain_strength
					$calc_dynamics_sustain_strength := (1000000 * (get_control_par(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_MIN_VALUE)) )
					set_engine_par($ENGINE_PAR_TR_SUSTAIN, $calc_dynamics_sustain_strength, -1, $mainfx_slot_num__transient_master, $NI_MAIN_BUS)


			declare ui_panel $panel__mainfx_stereo_preemphasis
				set_control_par(get_ui_id($panel__mainfx_stereo_preemphasis),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__dynamics))
				set_control_par(get_ui_id ($panel__mainfx_stereo_preemphasis),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id ($panel__mainfx_stereo_preemphasis),$CONTROL_PAR_POS_Y, 22 + ($dynamics_panel_row_height * 4))

			declare ui_label $label__mainfx_stereo_preemphasis(1,1)
				set_control_par(get_ui_id($label__mainfx_stereo_preemphasis),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__mainfx_stereo_preemphasis))
				set_control_par(get_ui_id($label__mainfx_stereo_preemphasis),$CONTROL_PAR_WIDTH,$dynamics_panel_cezura_placement - $dynamics_panel_cezura_width)
				set_control_par(get_ui_id ($label__mainfx_stereo_preemphasis),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__mainfx_stereo_preemphasis),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__mainfx_stereo_preemphasis),$CONTROL_PAR_TEXT, @dynamics_panel_white_space &  "i m a g e :")
				set_control_par_str(get_ui_id ($label__mainfx_stereo_preemphasis),$CONTROL_PAR_HELP, "Mid-Side processing pre- and deemphasis.")

			declare ui_knob $knob_mainfx_stereo_preemfaza(-63,64,1)
				set_control_par(get_ui_id($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__mainfx_stereo_preemphasis))
				set_control_par_str(get_ui_id($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_AUTOMATION_NAME,"midside_emphasis")
				set_control_par(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_POS_X,$dynamics_panel_cezura_placement)
				set_control_par(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_TEXT, "" & "emphasis")
				set_control_par_str(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_HELP, "Mid-Side processing pre- and deemphasis.")
				set_control_par(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_VALUE, 12)
				set_control_par(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_DEFAULT_VALUE, 0)
				make_persistent($knob_mainfx_stereo_preemfaza)
				read_persistent_var($knob_mainfx_stereo_preemfaza)

				set_engine_par($ENGINE_PAR_STEREO, ($knob_mainfx_stereo_preemfaza-get_control_par(get_ui_id($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_MIN_VALUE) + 1) * 990000 / (get_control_par(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_MAX_VALUE) -get_control_par(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_MIN_VALUE) ), -1, $mainfx_slot_num__stereo_preemphasis, $NI_MAIN_BUS)
				set_engine_par($ENGINE_PAR_STEREO, 1000000 - (($knob_mainfx_stereo_preemfaza-get_control_par(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_MIN_VALUE)) * 990000 / (get_control_par(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_MAX_VALUE) -get_control_par(get_ui_id ($knob_mainfx_stereo_preemfaza),$CONTROL_PAR_MIN_VALUE) )), -1, $mainfx_slot_num__stereo_deemphasis, $NI_MAIN_BUS)

	end if




	if(1=1)

			declare ui_panel $panel__pan_settings
				set_control_par(get_ui_id($panel__pan_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_panner_tab))
				set_control_par(get_ui_id ($panel__pan_settings),$CONTROL_PAR_POS_X,182)
				set_control_par(get_ui_id ($panel__pan_settings),$CONTROL_PAR_POS_Y,40)
				declare const $pan_panel_cezura_placement := 84
				declare const $pan_panel_cezura_width := 2
				declare const $pan_panel_row_size := 18
				declare const $pan_panel_text_alignment := 0
				declare const $pan_panel_first_row_height := 20
				declare $pan_panel_helper_var
				declare @pan_panel_white_space
					@pan_panel_white_space := " "


				declare ui_panel $panel__panner_lr_input_stage
					set_control_par(get_ui_id($panel__panner_lr_input_stage),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id ($panel__panner_lr_input_stage),$CONTROL_PAR_POS_X, 216)
					set_control_par(get_ui_id ($panel__panner_lr_input_stage),$CONTROL_PAR_POS_Y, 0)
				declare ui_label $label__panner_lr_input_stage(1,1)
					set_control_par(get_ui_id($label__panner_lr_input_stage),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__panner_lr_input_stage))
					set_control_par(get_ui_id($label__panner_lr_input_stage),$CONTROL_PAR_WIDTH, 88)
					set_control_par(get_ui_id ($label__panner_lr_input_stage),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__panner_lr_input_stage),$CONTROL_PAR_POS_Y, 0)
					set_control_par_str(get_ui_id ($label__panner_lr_input_stage),$CONTROL_PAR_TEXT, " " & "i n p u t  p a n :")
					set_control_par_str(get_ui_id ($label__panner_lr_input_stage),$CONTROL_PAR_HELP, "input stage panning control in bus fx")
					set_control_par(get_ui_id ($label__panner_lr_input_stage),$CONTROL_PAR_TEXT_ALIGNMENT, 0)
			

				declare ui_knob $knob__panner_lr_input_stage(-100,100,1)
					set_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__panner_lr_input_stage))
					set_control_par_str(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_AUTOMATION_NAME,"panner_input_stage")
					set_control_par(get_ui_id ($knob__panner_lr_input_stage),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($knob__panner_lr_input_stage),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height)
					set_control_par_str(get_ui_id ($knob__panner_lr_input_stage),$CONTROL_PAR_TEXT, "  " & "pan")
					set_control_par_str(get_ui_id ($knob__panner_lr_input_stage),$CONTROL_PAR_HELP, "input stage panner control")
					set_control_par(get_ui_id ($knob__panner_lr_input_stage),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob__panner_lr_input_stage),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob__panner_lr_input_stage)
					read_persistent_var($knob__panner_lr_input_stage)

				declare ui_label $label__pan_settings(1,1)
					set_control_par(get_ui_id($label__pan_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__pan_settings),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement + $slider_width - $pan_panel_cezura_width - 40)
					set_control_par(get_ui_id ($label__pan_settings),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label__pan_settings),$CONTROL_PAR_POS_Y,0)
					set_control_par_str(get_ui_id ($label__pan_settings),$CONTROL_PAR_TEXT, @pan_panel_white_space & "p a n n e r :")
					set_control_par_str(get_ui_id ($label__pan_settings),$CONTROL_PAR_HELP, "panner settings")
					set_control_par(get_ui_id ($label__pan_settings),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_switch $switch__panner_module
					set_control_par(get_ui_id($switch__panner_module),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($switch__panner_module),$CONTROL_PAR_AUTOMATION_NAME,"smooth_attack")
					set_control_par(get_ui_id($switch__panner_module),$CONTROL_PAR_WIDTH, 40)
					set_control_par(get_ui_id ($switch__panner_module),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement + $slider_width - 40)
					set_control_par(get_ui_id ($switch__panner_module),$CONTROL_PAR_POS_Y, 0 + ($dynamics_panel_row_height * 0))
					set_control_par_str(get_ui_id ($switch__panner_module),$CONTROL_PAR_TEXT, "[    ]")
					set_control_par(get_ui_id($switch__panner_module), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch__panner_module),$CONTROL_PAR_HELP, "Turn on panner module.")
					set_control_par(get_ui_id ($switch__panner_module),$CONTROL_PAR_VALUE, 1)
					set_control_par(get_ui_id ($switch__panner_module),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch__panner_module)
					read_persistent_var($switch__panner_module)
					select($switch__panner_module)
						case 1
							set_control_par_str(get_ui_id ($switch__panner_module),$CONTROL_PAR_TEXT, "[ ON ]")
						case 0
							set_control_par_str(get_ui_id ($switch__panner_module),$CONTROL_PAR_TEXT, "[ off ]")
					end select
					if ($surround_panner_is_connected # 0)
						set_engine_par($ENGINE_PAR_EFFECT_BYPASS, ($switch__panner_module-1)*(-1), $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
					end if


				declare ui_label $label__panner_distance(1,1)
					set_control_par(get_ui_id($label__panner_distance),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__panner_distance),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement - $pan_panel_cezura_width)
					set_control_par(get_ui_id ($label__panner_distance),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__panner_distance),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 0))
					set_control_par_str(get_ui_id ($label__panner_distance),$CONTROL_PAR_TEXT, @pan_panel_white_space & "d i s t a n c e :")
					set_control_par_str(get_ui_id ($label__panner_distance),$CONTROL_PAR_HELP, "distance")
					set_control_par(get_ui_id ($label__panner_distance),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_slider $slider__panner_distance(0,127)
					set_control_par(get_ui_id($slider__panner_distance),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($slider__panner_distance),$CONTROL_PAR_AUTOMATION_NAME,"distance")
					set_control_par(get_ui_id ($slider__panner_distance),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__panner_distance),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 0) + 1)
					set_control_par_str(get_ui_id ($slider__panner_distance),$CONTROL_PAR_HELP, "distance parameter")
					set_control_par(get_ui_id ($slider__panner_distance),$CONTROL_PAR_VALUE, 75)
					set_control_par(get_ui_id ($slider__panner_distance),$CONTROL_PAR_DEFAULT_VALUE, 75)
					make_persistent($slider__panner_distance)
					read_persistent_var($slider__panner_distance)
					declare $calc_panner_distance
					$calc_panner_distance := (1000000 * (get_control_par(get_ui_id($slider__panner_distance),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_distance),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_distance),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_distance),$CONTROL_PAR_MIN_VALUE)) )
					if ($surround_panner_is_connected # 0)
						set_engine_par($ENGINE_PAR_SP_OFFSET_DISTANCE, $calc_panner_distance, $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
					end if

				declare ui_label $label__panner_directional_focus(1,1)
					set_control_par(get_ui_id($label__panner_directional_focus),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__panner_directional_focus),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement - $pan_panel_cezura_width)
					set_control_par(get_ui_id ($label__panner_directional_focus),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__panner_directional_focus),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 1))
					set_control_par_str(get_ui_id ($label__panner_directional_focus),$CONTROL_PAR_TEXT, @pan_panel_white_space & "f o c u s :")
					set_control_par_str(get_ui_id ($label__panner_directional_focus),$CONTROL_PAR_HELP, "channel separation | divergence | directional focus")
					set_control_par(get_ui_id ($label__panner_directional_focus),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_slider $slider__panner_directional_focus(0,100)
					set_control_par(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_AUTOMATION_NAME,"directional_focus")
					set_control_par(get_ui_id ($slider__panner_directional_focus),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__panner_directional_focus),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 1) + 1)
					set_control_par_str(get_ui_id ($slider__panner_directional_focus),$CONTROL_PAR_HELP, "Sets the diverge parameter of the surround panner fx.")
					set_control_par(get_ui_id ($slider__panner_directional_focus),$CONTROL_PAR_VALUE, 71)
					set_control_par(get_ui_id ($slider__panner_directional_focus),$CONTROL_PAR_DEFAULT_VALUE, 71)
					make_persistent($slider__panner_directional_focus)
					read_persistent_var($slider__panner_directional_focus)
					declare $calc_panner_directional_focus
					$calc_panner_directional_focus := (1000000 * (get_control_par(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_MIN_VALUE)) )
					if ($surround_panner_is_connected # 0)
						set_engine_par($ENGINE_PAR_SP_DIVERGENCE, $calc_panner_directional_focus  , $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
					end if

				declare ui_label $label__pan_perspective(1,1)
					set_control_par(get_ui_id($label__pan_perspective),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__pan_perspective),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement + $slider_width - $pan_panel_cezura_width - 60)
					set_control_par(get_ui_id ($label__pan_perspective),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label__pan_perspective),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($dynamics_panel_row_height * 2))
					set_control_par_str(get_ui_id ($label__pan_perspective),$CONTROL_PAR_TEXT, @pan_panel_white_space & "m o v e :")
					set_control_par_str(get_ui_id ($label__pan_perspective),$CONTROL_PAR_HELP, "panner perspective - toggles between affecting the location of the listener or the source.")
					set_control_par(get_ui_id ($label__pan_perspective),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_switch $switch__pan_object
					set_control_par(get_ui_id($switch__pan_object),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($switch__pan_object),$CONTROL_PAR_AUTOMATION_NAME,"smooth_attack")
					set_control_par(get_ui_id($switch__pan_object),$CONTROL_PAR_WIDTH, 60)
					set_control_par(get_ui_id($switch__pan_object),$CONTROL_PAR_HEIGHT, 18-0)
					set_control_par(get_ui_id ($switch__pan_object),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement + $slider_width - 60)
					set_control_par(get_ui_id ($switch__pan_object),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($dynamics_panel_row_height * 2) + 0)
					set_control_par_str(get_ui_id ($switch__pan_object),$CONTROL_PAR_TEXT, "[    ]")
					set_control_par(get_ui_id($switch__pan_object), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch__pan_object),$CONTROL_PAR_HELP, "panner perspective - toggles between affecting the location of the listener or the source.")
					set_control_par(get_ui_id ($switch__pan_object),$CONTROL_PAR_VALUE, 1)
					set_control_par(get_ui_id ($switch__pan_object),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch__pan_object)
					read_persistent_var($switch__pan_object)
					select($switch__pan_object)
						case 1
							set_control_par_str(get_ui_id ($switch__pan_object),$CONTROL_PAR_TEXT, "[ source ]")
						case 0
							set_control_par_str(get_ui_id ($switch__pan_object),$CONTROL_PAR_TEXT, "[ listener ]")
					end select

				declare ui_label $label__panner_azimuth_right(1,1)
					set_control_par(get_ui_id($label__panner_azimuth_right),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__panner_azimuth_right),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement - $pan_panel_cezura_width)
					set_control_par(get_ui_id ($label__panner_azimuth_right),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__panner_azimuth_right),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 3))
					set_control_par_str(get_ui_id ($label__panner_azimuth_right),$CONTROL_PAR_TEXT, @pan_panel_white_space & "p o l  r i g h t :")
					set_control_par_str(get_ui_id ($label__panner_azimuth_right),$CONTROL_PAR_HELP, "azimuth")
					set_control_par(get_ui_id ($label__panner_azimuth_right),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_slider $slider__panner_azimuth_right(0,127)
					set_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_AUTOMATION_NAME,"azimuth_pol_right")
					set_control_par(get_ui_id ($slider__panner_azimuth_right),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__panner_azimuth_right),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 3) + 1)
					set_control_par_str(get_ui_id ($slider__panner_azimuth_right),$CONTROL_PAR_HELP, "azimuth parameter")
					set_control_par(get_ui_id ($slider__panner_azimuth_right),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($slider__panner_azimuth_right),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($slider__panner_azimuth_right)
					read_persistent_var($slider__panner_azimuth_right)

				declare ui_label $label__panner_azimuth_left(1,1)
					set_control_par(get_ui_id($label__panner_azimuth_left),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__panner_azimuth_left),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement - $pan_panel_cezura_width)
					set_control_par(get_ui_id ($label__panner_azimuth_left),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__panner_azimuth_left),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 4))
					set_control_par_str(get_ui_id ($label__panner_azimuth_left),$CONTROL_PAR_TEXT, @pan_panel_white_space & "p o l  l e f t :")
					set_control_par_str(get_ui_id ($label__panner_azimuth_left),$CONTROL_PAR_HELP, "azimuth")
					set_control_par(get_ui_id ($label__panner_azimuth_left),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_slider $slider__panner_azimuth_left(0,127)
					set_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_AUTOMATION_NAME,"azimuth_pol_left")
					set_control_par(get_ui_id ($slider__panner_azimuth_left),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__panner_azimuth_left),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 4) + 1)
					set_control_par_str(get_ui_id ($slider__panner_azimuth_left),$CONTROL_PAR_HELP, "azimuth parameter")
					set_control_par(get_ui_id ($slider__panner_azimuth_left),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($slider__panner_azimuth_left),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($slider__panner_azimuth_left)
					read_persistent_var($slider__panner_azimuth_left)
					declare $calc_panner_azimuth
					$calc_panner_azimuth := (500000 * (get_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_MIN_VALUE)) ) + (500000 * (get_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_MIN_VALUE)) )
					select($switch__pan_object)
						case 1
							$calc_panner_azimuth := $calc_panner_azimuth
						case 0
							$calc_panner_azimuth := 1000000-$calc_panner_azimuth
					end select
					if ($surround_panner_is_connected # 0)
						set_engine_par($ENGINE_PAR_SP_OFFSET_AZIMUTH, $calc_panner_azimuth, $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
					end if

				declare ui_label $label__panner_xshift_car_right(1,1)
					set_control_par(get_ui_id($label__panner_xshift_car_right),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__panner_xshift_car_right),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement - $pan_panel_cezura_width)
					set_control_par(get_ui_id ($label__panner_xshift_car_right),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__panner_xshift_car_right),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 5))
					set_control_par_str(get_ui_id ($label__panner_xshift_car_right),$CONTROL_PAR_TEXT, @pan_panel_white_space & "c a r  r i g h t :")
					set_control_par_str(get_ui_id ($label__panner_xshift_car_right),$CONTROL_PAR_HELP, "x shift")
					set_control_par(get_ui_id ($label__panner_xshift_car_right),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_slider $slider__panner_xshift_car_right(0,127)
					set_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_AUTOMATION_NAME,"x_shift_car_right")
					set_control_par(get_ui_id ($slider__panner_xshift_car_right),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__panner_xshift_car_right),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 5) + 1)
					set_control_par_str(get_ui_id ($slider__panner_xshift_car_right),$CONTROL_PAR_HELP, "x shift")
					set_control_par(get_ui_id ($slider__panner_xshift_car_right),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($slider__panner_xshift_car_right),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($slider__panner_xshift_car_right)
					read_persistent_var($slider__panner_xshift_car_right)

				declare ui_label $label__panner_xshift_car_left(1,1)
					set_control_par(get_ui_id($label__panner_xshift_car_left),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__panner_xshift_car_left),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement - $pan_panel_cezura_width)
					set_control_par(get_ui_id ($label__panner_xshift_car_left),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__panner_xshift_car_left),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 6))
					set_control_par_str(get_ui_id ($label__panner_xshift_car_left),$CONTROL_PAR_TEXT, @pan_panel_white_space & "c a r  l e f t :")
					set_control_par_str(get_ui_id ($label__panner_xshift_car_left),$CONTROL_PAR_HELP, "x shift")
					set_control_par(get_ui_id ($label__panner_xshift_car_left),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_slider $slider__panner_xshift_car_left(0,127)
					set_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_AUTOMATION_NAME,"x_shift_car_left")
					set_control_par(get_ui_id ($slider__panner_xshift_car_left),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__panner_xshift_car_left),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 6) + 1)
					set_control_par_str(get_ui_id ($slider__panner_xshift_car_left),$CONTROL_PAR_HELP, "x shift")
					set_control_par(get_ui_id ($slider__panner_xshift_car_left),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($slider__panner_xshift_car_left),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($slider__panner_xshift_car_left)
					read_persistent_var($slider__panner_xshift_car_left)
					declare $calc_panner_xshift_car
					$calc_panner_xshift_car := (500000 * (get_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_MIN_VALUE)) ) + (500000 * (get_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_MIN_VALUE)) )
					select($switch__pan_object)
						case 1
							$calc_panner_xshift_car := $calc_panner_xshift_car
						case 0
							$calc_panner_xshift_car := 1000000-$calc_panner_xshift_car
					end select
					if ($surround_panner_is_connected # 0)
						set_engine_par($ENGINE_PAR_SP_OFFSET_X, $calc_panner_xshift_car, $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
					end if

				declare ui_label $label__panner_yshift_forward(1,1)
					set_control_par(get_ui_id($label__panner_yshift_forward),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__panner_yshift_forward),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement - $pan_panel_cezura_width)
					set_control_par(get_ui_id ($label__panner_yshift_forward),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__panner_yshift_forward),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 7))
					set_control_par_str(get_ui_id ($label__panner_yshift_forward),$CONTROL_PAR_TEXT, @pan_panel_white_space & "f o r w a r d :")
					set_control_par_str(get_ui_id ($label__panner_yshift_forward),$CONTROL_PAR_HELP, "y shift")
					set_control_par(get_ui_id ($label__panner_yshift_forward),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_slider $slider__panner_yshift_forward(0,127)
					set_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_AUTOMATION_NAME,"y_shift_forward")
					set_control_par(get_ui_id ($slider__panner_yshift_forward),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__panner_yshift_forward),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 7) + 1)
					set_control_par_str(get_ui_id ($slider__panner_yshift_forward),$CONTROL_PAR_HELP, "y shift")
					set_control_par(get_ui_id ($slider__panner_yshift_forward),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($slider__panner_yshift_forward),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($slider__panner_yshift_forward)
					read_persistent_var($slider__panner_yshift_forward)


				declare ui_label $label__panner_yshift_backward(1,1)
					set_control_par(get_ui_id($label__panner_yshift_backward),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par(get_ui_id($label__panner_yshift_backward),$CONTROL_PAR_WIDTH, $pan_panel_cezura_placement - $pan_panel_cezura_width)
					set_control_par(get_ui_id ($label__panner_yshift_backward),$CONTROL_PAR_POS_X, 0)
					set_control_par(get_ui_id ($label__panner_yshift_backward),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 8))
					set_control_par_str(get_ui_id ($label__panner_yshift_backward),$CONTROL_PAR_TEXT, @pan_panel_white_space & "b a c k w a r d :")
					set_control_par_str(get_ui_id ($label__panner_yshift_backward),$CONTROL_PAR_HELP, "y shift")
					set_control_par(get_ui_id ($label__panner_yshift_backward),$CONTROL_PAR_TEXT_ALIGNMENT, $pan_panel_text_alignment)

				declare ui_slider $slider__panner_yshift_backward(0,127)
					set_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__pan_settings))
					set_control_par_str(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_AUTOMATION_NAME,"y_shift_backward")
					set_control_par(get_ui_id ($slider__panner_yshift_backward),$CONTROL_PAR_POS_X, $pan_panel_cezura_placement)
					set_control_par(get_ui_id ($slider__panner_yshift_backward),$CONTROL_PAR_POS_Y, $pan_panel_first_row_height + ($pan_panel_row_size * 8) + 1)
					set_control_par_str(get_ui_id ($slider__panner_yshift_backward),$CONTROL_PAR_HELP, "y shift")
					set_control_par(get_ui_id ($slider__panner_yshift_backward),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($slider__panner_yshift_backward),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($slider__panner_yshift_backward)
					read_persistent_var($slider__panner_yshift_backward)
					declare $calc_knob__panner_yshift
					$calc_knob__panner_yshift := (1000000 * (get_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_MIN_VALUE)) ) - (1000000 * (get_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_MIN_VALUE)) )
					select($switch__pan_object)
						case 1
							{$calc_knob__panner_yshift := 1000000-$calc_knob__panner_yshift}
							$calc_knob__panner_yshift := $calc_knob__panner_yshift
						case 0
							$calc_knob__panner_yshift := $calc_knob__panner_yshift
					end select
					if ($surround_panner_is_connected # 0)
						set_engine_par($ENGINE_PAR_SP_OFFSET_Y, $calc_knob__panner_yshift, $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
					end if
	end if



	{module bus "clean" $panel__bus_clean_controls}
	if(1=1)

			declare ui_panel $panel__busclean_filters
				set_control_par(get_ui_id($panel__busclean_filters),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_clean_controls))
				set_control_par(get_ui_id ($panel__busclean_filters),$CONTROL_PAR_POS_X,128)
				set_control_par(get_ui_id ($panel__busclean_filters),$CONTROL_PAR_POS_Y,60)

			declare ui_label $label__busclean_filters(1,1)
				set_control_par(get_ui_id($label__busclean_filters),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_filters))
				set_control_par(get_ui_id($label__busclean_filters),$CONTROL_PAR_WIDTH,(88+2)*4 - 2)
				set_control_par(get_ui_id ($label__busclean_filters),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__busclean_filters),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__busclean_filters),$CONTROL_PAR_TEXT, " c o l o u r :")
				set_control_par_str(get_ui_id ($label__busclean_filters),$CONTROL_PAR_HELP, "basic filters")

				declare ui_knob $knob_busclean_filters__hp(0,127,1)
					set_control_par(get_ui_id($knob_busclean_filters__hp),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_filters))
					set_control_par_str(get_ui_id($knob_busclean_filters__hp),$CONTROL_PAR_AUTOMATION_NAME,"hp")
					set_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_TEXT, "    " & "hp")
					set_control_par_str(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_VALUE, 1)
					set_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_DEFAULT_VALUE, 1)
					make_persistent($knob_busclean_filters__hp)
					read_persistent_var($knob_busclean_filters__hp)

				declare ui_knob $knob_busclean_filters__notch_cutoff(1,128,1)
					set_control_par(get_ui_id($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_filters))
					set_control_par_str(get_ui_id($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_AUTOMATION_NAME,"notch_cutoff")
					set_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_TEXT, "  " & "notch")
					set_control_par_str(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_VALUE, 1)
					set_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_DEFAULT_VALUE, 1)
					make_persistent($knob_busclean_filters__notch_cutoff)
					read_persistent_var($knob_busclean_filters__notch_cutoff)

				declare ui_knob $knob_busclean_filters__notch_reso(-47,80,1)
					set_control_par(get_ui_id($knob_busclean_filters__notch_reso),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_filters))
					set_control_par_str(get_ui_id($knob_busclean_filters__notch_reso),$CONTROL_PAR_AUTOMATION_NAME,"notch_resonance")
					set_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_POS_X, (88 + 2) * 2)
					set_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_TEXT, "  " & "reso")
					set_control_par_str(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busclean_filters__notch_reso)
					read_persistent_var($knob_busclean_filters__notch_reso)

				declare ui_switch $switch_busclean_filters__tape_lp
					set_control_par(get_ui_id($switch_busclean_filters__tape_lp),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_filters))
					set_control_par_str(get_ui_id($switch_busclean_filters__tape_lp),$CONTROL_PAR_AUTOMATION_NAME,"tape_lp")
					set_control_par(get_ui_id ($switch_busclean_filters__tape_lp),$CONTROL_PAR_POS_X, (88 + 2) * 3)
					set_control_par(get_ui_id ($switch_busclean_filters__tape_lp),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($switch_busclean_filters__tape_lp),$CONTROL_PAR_TEXT, "" & "[ tape low-pass ]")
					set_control_par(get_ui_id ($switch_busclean_filters__tape_lp),$CONTROL_PAR_WIDTH, 88)
					set_control_par(get_ui_id($switch_busclean_filters__tape_lp), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch_busclean_filters__tape_lp),$CONTROL_PAR_HELP, "turns on the tape emulation with a warm low pass filter.")
					set_control_par(get_ui_id ($switch_busclean_filters__tape_lp),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch_busclean_filters__tape_lp),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch_busclean_filters__tape_lp)
					read_persistent_var($switch_busclean_filters__tape_lp)

				declare ui_switch $switch__busclean_transmaster_smooth_attack
					set_control_par(get_ui_id($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_filters))
					set_control_par_str(get_ui_id($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_AUTOMATION_NAME,"smooth_attack")
					set_control_par(get_ui_id($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_WIDTH, 40)
					set_control_par(get_ui_id ($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_POS_X, (88 + 2) * 3)
					set_control_par(get_ui_id ($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_POS_Y, 22 + 21)
					set_control_par_str(get_ui_id ($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_TEXT, "[ smoothening ]")
					set_control_par(get_ui_id ($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_WIDTH, 88)
					set_control_par(get_ui_id($switch__busclean_transmaster_smooth_attack), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_HELP, "softens the attack of the sample")
					set_control_par(get_ui_id ($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch__busclean_transmaster_smooth_attack),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch__busclean_transmaster_smooth_attack)
					read_persistent_var($switch__busclean_transmaster_smooth_attack)

			declare ui_panel $panel__busclean_image
				set_control_par(get_ui_id($panel__busclean_image),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_clean_controls))
				set_control_par(get_ui_id ($panel__busclean_image),$CONTROL_PAR_POS_X,128)
				set_control_par(get_ui_id ($panel__busclean_image),$CONTROL_PAR_POS_Y,128)

			declare ui_label $label__busclean_image(1,1)
				set_control_par(get_ui_id($label__busclean_image),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_image))
				set_control_par(get_ui_id($label__busclean_image),$CONTROL_PAR_WIDTH,(88+2)*4 - 2)
				set_control_par(get_ui_id ($label__busclean_image),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__busclean_image),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__busclean_image),$CONTROL_PAR_TEXT, " s u b s t a n c e :")
				set_control_par_str(get_ui_id ($label__busclean_image),$CONTROL_PAR_HELP, "Dynamic processors")

				declare ui_knob $knob_busclean_image__saturation(-64,63,1)
					set_control_par(get_ui_id($knob_busclean_image__saturation),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_image))
					set_control_par_str(get_ui_id($knob_busclean_image__saturation),$CONTROL_PAR_AUTOMATION_NAME,"hp")
					set_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_TEXT, "   " & "satch")
					set_control_par_str(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_VALUE, 1)
					set_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busclean_image__saturation)
					read_persistent_var($knob_busclean_image__saturation)

				declare ui_knob $knob_busclean_image__transient_strength(-63,64,1)
					set_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_image))
					set_control_par_str(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_AUTOMATION_NAME,"transient_strength")
					set_control_par(get_ui_id ($knob_busclean_image__transient_strength),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_busclean_image__transient_strength),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busclean_image__transient_strength),$CONTROL_PAR_TEXT, "   " & "hit")
					set_control_par_str(get_ui_id ($knob_busclean_image__transient_strength),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busclean_image__transient_strength),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busclean_image__transient_strength),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busclean_image__transient_strength)
					read_persistent_var($knob_busclean_image__transient_strength)

				declare ui_knob $knob_busclean_image__sustain_loudness(-63,64,1)
					set_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_image))
					set_control_par_str(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_AUTOMATION_NAME,"sustain_energy")
					set_control_par(get_ui_id ($knob_busclean_image__sustain_loudness),$CONTROL_PAR_POS_X, (88 + 2) * 2)
					set_control_par(get_ui_id ($knob_busclean_image__sustain_loudness),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busclean_image__sustain_loudness),$CONTROL_PAR_TEXT, "  " & "sustain")
					set_control_par_str(get_ui_id ($knob_busclean_image__sustain_loudness),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busclean_image__sustain_loudness),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busclean_image__sustain_loudness),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busclean_image__sustain_loudness)
					read_persistent_var($knob_busclean_image__sustain_loudness)

				declare ui_knob $knob_busclean_image__stereo_preemphasis(-63,64,1)
					set_control_par(get_ui_id($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busclean_image))
					set_control_par_str(get_ui_id($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_AUTOMATION_NAME,"stereo_preemphasis")
					set_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_POS_X, (88 + 2) * 3)
					set_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_TEXT, "  " & "image")
					set_control_par_str(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_HELP, "Mid-Side processing pre- and deemphasis.")
					set_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busclean_image__stereo_preemphasis)
					read_persistent_var($knob_busclean_image__stereo_preemphasis)
					set_engine_par($ENGINE_PAR_STEREO, ($knob_busclean_image__stereo_preemphasis - get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)+ 1) * 990000 / (get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
					set_engine_par($ENGINE_PAR_STEREO, 1000000 - (($knob_busclean_image__stereo_preemphasis - get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE) + 1) * 990000 / (get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE))), -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	end if


	{module bus "drive" $panel__bus_drive_controls}
	if(1=1)

			declare ui_panel $panel__busdrive_distortion_settings
				set_control_par(get_ui_id($panel__busdrive_distortion_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_drive_controls))
				set_control_par(get_ui_id ($panel__busdrive_distortion_settings),$CONTROL_PAR_POS_X,128)
				set_control_par(get_ui_id ($panel__busdrive_distortion_settings),$CONTROL_PAR_POS_Y,60)

			declare ui_label $label__busdrive_distortion_settings(1,1)
				set_control_par(get_ui_id($label__busdrive_distortion_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_distortion_settings))
				set_control_par(get_ui_id($label__busdrive_distortion_settings),$CONTROL_PAR_WIDTH,(88+2)*3 - 2)
				set_control_par(get_ui_id ($label__busdrive_distortion_settings),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__busdrive_distortion_settings),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__busdrive_distortion_settings),$CONTROL_PAR_TEXT, " d i s t o r t i o n :")
				set_control_par_str(get_ui_id ($label__busdrive_distortion_settings),$CONTROL_PAR_HELP, "")

				declare ui_knob $knob_busdrive_distortion_settings__saturation(-63,64,1)
					set_control_par(get_ui_id($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_distortion_settings))
					set_control_par_str(get_ui_id($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_AUTOMATION_NAME,"input_saturation")
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_TEXT, "" & "input gain")
					set_control_par_str(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busdrive_distortion_settings__saturation)
					read_persistent_var($knob_busdrive_distortion_settings__saturation)

				declare ui_knob $knob_busdrive_distortion_settings__cat_distortion(0,127,1)
					set_control_par(get_ui_id($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_distortion_settings))
					set_control_par_str(get_ui_id($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_AUTOMATION_NAME,"cat_distortion")
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_TEXT, "" & "distortion")
					set_control_par_str(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_VALUE, 52)
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_DEFAULT_VALUE, 27)
					make_persistent($knob_busdrive_distortion_settings__cat_distortion)
					read_persistent_var($knob_busdrive_distortion_settings__cat_distortion)

				declare ui_knob $knob_busdrive_distortion_settings__cat_filter(0,127,1)
					set_control_par(get_ui_id($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_distortion_settings))
					set_control_par_str(get_ui_id($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_AUTOMATION_NAME,"cat_filter")
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_POS_X, (88 + 2) * 2)
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_TEXT, "  " & "filter")
					set_control_par_str(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($knob_busdrive_distortion_settings__cat_filter)
					read_persistent_var($knob_busdrive_distortion_settings__cat_filter)

			declare ui_panel $panel__busdrive_bitcrusher
				set_control_par(get_ui_id($panel__busdrive_bitcrusher),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_drive_controls))
				set_control_par(get_ui_id ($panel__busdrive_bitcrusher),$CONTROL_PAR_POS_X,128)
				set_control_par(get_ui_id ($panel__busdrive_bitcrusher),$CONTROL_PAR_POS_Y,128)

			declare ui_label $label__busdrive_bitcrusher(1,1)
				set_control_par(get_ui_id($label__busdrive_bitcrusher),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_bitcrusher))
				set_control_par(get_ui_id($label__busdrive_bitcrusher),$CONTROL_PAR_WIDTH,(88+2)*2 - 2)
				set_control_par(get_ui_id ($label__busdrive_bitcrusher),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__busdrive_bitcrusher),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__busdrive_bitcrusher),$CONTROL_PAR_TEXT, " b i t  c r u s h e r :")
				set_control_par_str(get_ui_id ($label__busdrive_bitcrusher),$CONTROL_PAR_HELP, "")

				declare ui_knob $knob_busdrive_bitcrusher__sample_rate_reduction(0,127,1)
					set_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_bitcrusher))
					set_control_par_str(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_AUTOMATION_NAME,"sample_rate_reduction")
					set_control_par(get_ui_id ($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_TEXT, "crush " & "SR")
					set_control_par_str(get_ui_id ($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busdrive_bitcrusher__sample_rate_reduction)
					read_persistent_var($knob_busdrive_bitcrusher__sample_rate_reduction)

				declare ui_knob $knob_busdrive_bitcrusher__bit_rate_reduction(0,127,1)
					set_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_bitcrusher))
					set_control_par_str(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_AUTOMATION_NAME,"bit_rate_reduction")
					set_control_par(get_ui_id ($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_TEXT, "crush " & "BR")
					set_control_par_str(get_ui_id ($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busdrive_bitcrusher__bit_rate_reduction)
					read_persistent_var($knob_busdrive_bitcrusher__bit_rate_reduction)






			declare ui_panel $panel__busdrive_wahwah
				set_control_par(get_ui_id($panel__busdrive_wahwah),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_drive_controls))
				set_control_par(get_ui_id ($panel__busdrive_wahwah),$CONTROL_PAR_POS_X,128 + (90*3))
				set_control_par(get_ui_id ($panel__busdrive_wahwah),$CONTROL_PAR_POS_Y,60)

				declare ui_switch $switch_busdrive_filters__wahwah
					set_control_par(get_ui_id($switch_busdrive_filters__wahwah),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_wahwah))
					set_control_par_str(get_ui_id($switch_busdrive_filters__wahwah),$CONTROL_PAR_AUTOMATION_NAME,"wahwah")
					set_control_par(get_ui_id ($switch_busdrive_filters__wahwah),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($switch_busdrive_filters__wahwah),$CONTROL_PAR_POS_Y,0)
					set_control_par_str(get_ui_id ($switch_busdrive_filters__wahwah),$CONTROL_PAR_TEXT, "" & "[ wahwah ]")
					set_control_par(get_ui_id($switch_busdrive_filters__wahwah), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch_busdrive_filters__wahwah),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($switch_busdrive_filters__wahwah),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch_busdrive_filters__wahwah),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch_busdrive_filters__wahwah)
					read_persistent_var($switch_busdrive_filters__wahwah)
					select ($switch_busdrive_filters__wahwah)
						case 0
							set_control_par_str(get_ui_id ($switch_busdrive_filters__wahwah),$CONTROL_PAR_TEXT, "[ wahwah ]")
						case 1
							set_control_par_str(get_ui_id ($switch_busdrive_filters__wahwah),$CONTROL_PAR_TEXT, "[ wahwah ]")
					end select

				declare ui_knob $knob_busdrive_filters__wahwah(0,127,1)
					set_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_wahwah))
					set_control_par_str(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_AUTOMATION_NAME,"wahwah")
					set_control_par(get_ui_id ($knob_busdrive_filters__wahwah),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_busdrive_filters__wahwah),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busdrive_filters__wahwah),$CONTROL_PAR_TEXT, " " & "wahwah")
					set_control_par_str(get_ui_id ($knob_busdrive_filters__wahwah),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busdrive_filters__wahwah),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busdrive_filters__wahwah),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busdrive_filters__wahwah)
					read_persistent_var($knob_busdrive_filters__wahwah)

			declare ui_panel $panel__busdrive_filters
				set_control_par(get_ui_id($panel__busdrive_filters),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_drive_controls))
				set_control_par(get_ui_id ($panel__busdrive_filters),$CONTROL_PAR_POS_X,128 + (90*4))
				set_control_par(get_ui_id ($panel__busdrive_filters),$CONTROL_PAR_POS_Y,60)

			declare ui_label $label__busdrive_filters(1,1)
				set_control_par(get_ui_id($label__busdrive_filters),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_filters))
				set_control_par(get_ui_id($label__busdrive_filters),$CONTROL_PAR_WIDTH,(88+2)*1 - 2)
				set_control_par(get_ui_id ($label__busdrive_filters),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__busdrive_filters),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__busdrive_filters),$CONTROL_PAR_TEXT, " filters :")
				set_control_par_str(get_ui_id ($label__busdrive_filters),$CONTROL_PAR_HELP, "")

				declare ui_switch $switch_busdrive_filters__tape_lp
					set_control_par(get_ui_id($switch_busdrive_filters__tape_lp),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_wahwah))
					set_control_par_str(get_ui_id($switch_busdrive_filters__tape_lp),$CONTROL_PAR_AUTOMATION_NAME,"tape_lp")
					set_control_par(get_ui_id ($switch_busdrive_filters__tape_lp),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($switch_busdrive_filters__tape_lp),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($switch_busdrive_filters__tape_lp),$CONTROL_PAR_TEXT, "tape low-pass")
					set_control_par(get_ui_id($switch_busdrive_filters__tape_lp), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch_busdrive_filters__tape_lp),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($switch_busdrive_filters__tape_lp),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch_busdrive_filters__tape_lp),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch_busdrive_filters__tape_lp)
					read_persistent_var($switch_busdrive_filters__tape_lp)


			declare ui_panel $panel__busdrive_phase_filter
				set_control_par(get_ui_id($panel__busdrive_phase_filter),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_drive_controls))
				set_control_par(get_ui_id ($panel__busdrive_phase_filter),$CONTROL_PAR_POS_X,128+(90*2))
				set_control_par(get_ui_id ($panel__busdrive_phase_filter),$CONTROL_PAR_POS_Y,128)

			declare ui_label $label__busdrive_phase_filter(1,1)
				set_control_par(get_ui_id($label__busdrive_phase_filter),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_phase_filter))
				set_control_par(get_ui_id($label__busdrive_phase_filter),$CONTROL_PAR_WIDTH,(88+2)*3 - 2)
				set_control_par(get_ui_id ($label__busdrive_phase_filter),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__busdrive_phase_filter),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__busdrive_phase_filter),$CONTROL_PAR_TEXT, " p h a s e  f i l t e r :")
				set_control_par_str(get_ui_id ($label__busdrive_phase_filter),$CONTROL_PAR_HELP, "")

				declare ui_knob $knob_busdrive_phase_filter__reso(0,127,1)
					set_control_par(get_ui_id($knob_busdrive_phase_filter__reso),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_phase_filter))
					set_control_par_str(get_ui_id($knob_busdrive_phase_filter__reso),$CONTROL_PAR_AUTOMATION_NAME,"wahwah")
					set_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_TEXT, " " & "phaser")
					set_control_par_str(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busdrive_phase_filter__reso)
					read_persistent_var($knob_busdrive_phase_filter__reso)
				declare ui_knob $knob_busdrive_phase_filter__cutoff(0,127,1)
					set_control_par(get_ui_id($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_phase_filter))
					set_control_par_str(get_ui_id($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_AUTOMATION_NAME,"phaser_swit")
					set_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_TEXT, "  " & "freq")
					set_control_par(get_ui_id($knob_busdrive_phase_filter__cutoff), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busdrive_phase_filter__cutoff)
					read_persistent_var($knob_busdrive_phase_filter__cutoff)

				declare ui_knob $knob_busdrive_filters__stereo_preemphasis(-63,64,1)
					set_control_par(get_ui_id($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__busdrive_phase_filter))
					set_control_par_str(get_ui_id($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_AUTOMATION_NAME,"stereo_preemphasis")
					set_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_POS_X, (88 + 2) * 2)
					set_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_TEXT, " " & "image")
					set_control_par_str(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_HELP, "Mid-Side processing pre- and deemphasis.")
					set_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_VALUE, 40)
					set_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_busdrive_filters__stereo_preemphasis)
					read_persistent_var($knob_busdrive_filters__stereo_preemphasis)
					set_engine_par($ENGINE_PAR_STEREO, ($knob_busdrive_filters__stereo_preemphasis - get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)+ 1) * 990000 / (get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
					set_engine_par($ENGINE_PAR_STEREO, 1000000 - (($knob_busdrive_filters__stereo_preemphasis - get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE) + 1) * 990000 / (get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE))), -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	end if

	{module bus "synth" $panel__bus_synth_controls}
	if(1=1)

			declare ui_panel $panel__bussynth_input_gain_saturation
				set_control_par(get_ui_id($panel__bussynth_input_gain_saturation),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_synth_controls))
				set_control_par(get_ui_id ($panel__bussynth_input_gain_saturation),$CONTROL_PAR_POS_X,128)
				set_control_par(get_ui_id ($panel__bussynth_input_gain_saturation),$CONTROL_PAR_POS_Y,60)

			declare ui_label $label__bussynth_input_gain_saturation(1,1)
				set_control_par(get_ui_id($label__bussynth_input_gain_saturation),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_input_gain_saturation))
				set_control_par(get_ui_id($label__bussynth_input_gain_saturation),$CONTROL_PAR_WIDTH,(88+2)*1 - 2)
				set_control_par(get_ui_id ($label__bussynth_input_gain_saturation),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__bussynth_input_gain_saturation),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__bussynth_input_gain_saturation),$CONTROL_PAR_TEXT, "s a t u r a t i o n :")
				set_control_par_str(get_ui_id ($label__bussynth_input_gain_saturation),$CONTROL_PAR_HELP, "")

				declare ui_knob $knob_bussynth_input_gain_saturation(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_input_gain_saturation),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_input_gain_saturation))
					set_control_par_str(get_ui_id($knob_bussynth_input_gain_saturation),$CONTROL_PAR_AUTOMATION_NAME,"input_gain_saturation")
					set_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_TEXT, "input gain")
					set_control_par(get_ui_id($knob_bussynth_input_gain_saturation), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_input_gain_saturation)
					read_persistent_var($knob_bussynth_input_gain_saturation)




			declare ui_panel $panel__bussynth_bitcrusher
				set_control_par(get_ui_id($panel__bussynth_bitcrusher),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_synth_controls))
				set_control_par(get_ui_id ($panel__bussynth_bitcrusher),$CONTROL_PAR_POS_X,128+(90*1))
				set_control_par(get_ui_id ($panel__bussynth_bitcrusher),$CONTROL_PAR_POS_Y,60)

			declare ui_label $label__bussynth_bitcrusher(1,1)
				set_control_par(get_ui_id($label__bussynth_bitcrusher),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_bitcrusher))
				set_control_par(get_ui_id($label__bussynth_bitcrusher),$CONTROL_PAR_WIDTH,(88+2)*2 - 2)
				set_control_par(get_ui_id ($label__bussynth_bitcrusher),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__bussynth_bitcrusher),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__bussynth_bitcrusher),$CONTROL_PAR_TEXT, " b i t  c r u s h e r :")
				set_control_par_str(get_ui_id ($label__bussynth_bitcrusher),$CONTROL_PAR_HELP, "")

				declare ui_knob $knob_bussynth_bitcrusher__sample_rate_reduction(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_bitcrusher))
					set_control_par_str(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_AUTOMATION_NAME,"sample_rate_reduction")
					set_control_par(get_ui_id ($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_TEXT, "crush " & "SR")
					set_control_par_str(get_ui_id ($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_bitcrusher__sample_rate_reduction)
					read_persistent_var($knob_bussynth_bitcrusher__sample_rate_reduction)

				declare ui_knob $knob_bussynth_bitcrusher__bit_rate_reduction(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_bitcrusher))
					set_control_par_str(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_AUTOMATION_NAME,"bit_rate_reduction")
					set_control_par(get_ui_id ($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_TEXT, "crush " & "BR")
					set_control_par_str(get_ui_id ($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_bitcrusher__bit_rate_reduction)
					read_persistent_var($knob_bussynth_bitcrusher__bit_rate_reduction)

			declare ui_panel $panel__bussynth_distortion
				set_control_par(get_ui_id($panel__bussynth_distortion),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_synth_controls))
				set_control_par(get_ui_id ($panel__bussynth_distortion),$CONTROL_PAR_POS_X,128+(90*3))
				set_control_par(get_ui_id ($panel__bussynth_distortion),$CONTROL_PAR_POS_Y,60)

			declare ui_label $label__bussynth_distortion(1,1)
				set_control_par(get_ui_id($label__bussynth_distortion),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_distortion))
				set_control_par(get_ui_id($label__bussynth_distortion),$CONTROL_PAR_WIDTH,(88+2)*2 - 2)
				set_control_par(get_ui_id ($label__bussynth_distortion),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__bussynth_distortion),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__bussynth_distortion),$CONTROL_PAR_TEXT, " d i s t o r t i o n :")
				set_control_par_str(get_ui_id ($label__bussynth_distortion),$CONTROL_PAR_HELP, "")

				declare ui_knob $knob_bussynth_distortion__amount(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_distortion__amount),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_distortion))
					set_control_par_str(get_ui_id($knob_bussynth_distortion__amount),$CONTROL_PAR_AUTOMATION_NAME,"distortion_amount")
					set_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_TEXT, "distortion")
					set_control_par_str(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_distortion__amount)
					read_persistent_var($knob_bussynth_distortion__amount)

				declare ui_knob $knob_bussynth_distortion__damping(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_distortion__damping),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_distortion))
					set_control_par_str(get_ui_id($knob_bussynth_distortion__damping),$CONTROL_PAR_AUTOMATION_NAME,"bit_rate_reduction")
					set_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_TEXT, " " & "damping")
					set_control_par_str(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_distortion__damping)
					read_persistent_var($knob_bussynth_distortion__damping)

			declare ui_panel $panel__bussynth_phaser
				set_control_par(get_ui_id($panel__bussynth_phaser),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_synth_controls))
				set_control_par(get_ui_id ($panel__bussynth_phaser),$CONTROL_PAR_POS_X,128+(90*0))
				set_control_par(get_ui_id ($panel__bussynth_phaser),$CONTROL_PAR_POS_Y,128)

			declare ui_label $label__bussynth_phase_filter(1,1)
				set_control_par(get_ui_id($label__bussynth_phase_filter),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_phaser))
				set_control_par(get_ui_id($label__bussynth_phase_filter),$CONTROL_PAR_WIDTH,(88+2)*2 - 2)
				set_control_par(get_ui_id ($label__bussynth_phase_filter),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__bussynth_phase_filter),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__bussynth_phase_filter),$CONTROL_PAR_TEXT, " p h a s e  f i l t e r :")
				set_control_par_str(get_ui_id ($label__bussynth_phase_filter),$CONTROL_PAR_HELP, "")

				declare ui_knob $knob_bussynth_phase_filter__reso(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_phase_filter__reso),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_phaser))
					set_control_par_str(get_ui_id($knob_bussynth_phase_filter__reso),$CONTROL_PAR_AUTOMATION_NAME,"wahwah")
					set_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_TEXT, " " & "phaser")
					set_control_par_str(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_phase_filter__reso)
					read_persistent_var($knob_bussynth_phase_filter__reso)
				declare ui_knob $knob_bussynth_phase_filter__cutoff(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_phaser))
					set_control_par_str(get_ui_id($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_AUTOMATION_NAME,"phaser_swit")
					set_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_TEXT, "  " & "freq")
					set_control_par(get_ui_id($knob_bussynth_phase_filter__cutoff), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_phase_filter__cutoff)
					read_persistent_var($knob_bussynth_phase_filter__cutoff)


			declare ui_panel $panel__bussynth_choral
				set_control_par(get_ui_id($panel__bussynth_choral),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_synth_controls))
				set_control_par(get_ui_id ($panel__bussynth_choral),$CONTROL_PAR_POS_X,128+(90*2))
				set_control_par(get_ui_id ($panel__bussynth_choral),$CONTROL_PAR_POS_Y,128)

			declare ui_label $label__bussynth_choral(1,1)
				set_control_par(get_ui_id($label__bussynth_choral),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_choral))
				set_control_par(get_ui_id($label__bussynth_choral),$CONTROL_PAR_WIDTH,(88+2)*2 + 60)
				set_control_par(get_ui_id ($label__bussynth_choral),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__bussynth_choral),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__bussynth_choral),$CONTROL_PAR_TEXT, " c h o i r :")
				set_control_par_str(get_ui_id ($label__bussynth_choral),$CONTROL_PAR_HELP, "")

				declare ui_knob $knob_bussynth_choral__voice_delay(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_choral__voice_delay),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_choral))
					set_control_par_str(get_ui_id($knob_bussynth_choral__voice_delay),$CONTROL_PAR_AUTOMATION_NAME,"voice_delay")
					set_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_TEXT, "  " & "delay")
					set_control_par_str(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_choral__voice_delay)
					read_persistent_var($knob_bussynth_choral__voice_delay)

				declare ui_knob $knob_bussynth_choral__feedback(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_choral__feedback),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_choral))
					set_control_par_str(get_ui_id($knob_bussynth_choral__feedback),$CONTROL_PAR_AUTOMATION_NAME,"feedback")
					set_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_TEXT, " " & "feedback")
					set_control_par_str(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($knob_bussynth_choral__feedback)
					read_persistent_var($knob_bussynth_choral__feedback)

				declare ui_switch $switch_bussynth_choral
					set_control_par(get_ui_id($switch_bussynth_choral),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_choral))
					set_control_par_str(get_ui_id($switch_bussynth_choral),$CONTROL_PAR_AUTOMATION_NAME,"par3")
					set_control_par(get_ui_id ($switch_bussynth_choral),$CONTROL_PAR_POS_X, (88 + 2) * 2)
					set_control_par(get_ui_id ($switch_bussynth_choral),$CONTROL_PAR_POS_Y,22)
					set_control_par(get_ui_id ($switch_bussynth_choral),$CONTROL_PAR_WIDTH, 60)
					set_control_par_str(get_ui_id ($switch_bussynth_choral),$CONTROL_PAR_TEXT, "    " & "par3")
					set_control_par(get_ui_id($switch_bussynth_choral), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch_bussynth_choral),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($switch_bussynth_choral),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch_bussynth_choral),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch_bussynth_choral)
					read_persistent_var($switch_bussynth_choral)
					select($switch_bussynth_choral)
						case 1
							set_control_par_str(get_ui_id ($switch_bussynth_choral),$CONTROL_PAR_TEXT, "[ ON ]")
						case 0
							set_control_par_str(get_ui_id ($switch_bussynth_choral),$CONTROL_PAR_TEXT, "[ off ]")
					end select

				declare ui_switch $switch_bussynth_choral__inv_phase
					set_control_par(get_ui_id($switch_bussynth_choral__inv_phase),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_choral))
					set_control_par_str(get_ui_id($switch_bussynth_choral__inv_phase),$CONTROL_PAR_AUTOMATION_NAME,"negative_phase")
					set_control_par(get_ui_id ($switch_bussynth_choral__inv_phase),$CONTROL_PAR_POS_X, (88 + 2) * 2)
					set_control_par(get_ui_id ($switch_bussynth_choral__inv_phase),$CONTROL_PAR_POS_Y,22+20)
					set_control_par(get_ui_id ($switch_bussynth_choral__inv_phase),$CONTROL_PAR_WIDTH, 60)
					set_control_par_str(get_ui_id ($switch_bussynth_choral__inv_phase),$CONTROL_PAR_TEXT, "[ phase ]")
					set_control_par(get_ui_id($switch_bussynth_choral__inv_phase), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch_bussynth_choral__inv_phase),$CONTROL_PAR_HELP, "")
					set_control_par(get_ui_id ($switch_bussynth_choral__inv_phase),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch_bussynth_choral__inv_phase),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch_bussynth_choral__inv_phase)
					read_persistent_var($switch_bussynth_choral__inv_phase)
					select($switch_bussynth_choral__inv_phase)
						case 1
							set_control_par_str(get_ui_id ($switch_bussynth_choral__inv_phase),$CONTROL_PAR_TEXT, "[ phase ]")
						case 0
							set_control_par_str(get_ui_id ($switch_bussynth_choral__inv_phase),$CONTROL_PAR_TEXT, "[ phase ]")
					end select

			declare ui_panel $panel__bussynth_karplusstrong
				set_control_par(get_ui_id($panel__bussynth_karplusstrong),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_synth_controls))
				set_control_par(get_ui_id ($panel__bussynth_karplusstrong),$CONTROL_PAR_POS_X,128)
				set_control_par(get_ui_id ($panel__bussynth_karplusstrong),$CONTROL_PAR_POS_Y,196)

			declare ui_label $label__bussynth_karplusstrong(1,1)
				set_control_par(get_ui_id($label__bussynth_karplusstrong),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_karplusstrong))
				set_control_par(get_ui_id($label__bussynth_karplusstrong),$CONTROL_PAR_WIDTH,(88+2)*5 - 2)
				set_control_par(get_ui_id ($label__bussynth_karplusstrong),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__bussynth_karplusstrong),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label__bussynth_karplusstrong),$CONTROL_PAR_TEXT, " k a r p l u s - s t r o n g :")
				set_control_par_str(get_ui_id ($label__bussynth_karplusstrong),$CONTROL_PAR_HELP, "")

				declare ui_knob $knob_bussynth_karplusstrong__feedback(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_karplusstrong))
					set_control_par_str(get_ui_id($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_AUTOMATION_NAME,"feedback")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_POS_X, (88 + 2) * 0)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_TEXT, " " & "feedback")
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_HELP, "Feedback gain in Karplus-Strong delay line.")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_karplusstrong__feedback)
					read_persistent_var($knob_bussynth_karplusstrong__feedback)
					declare $calc_bussynth_karplusstrong_feedback_level

				declare ui_knob $knob_bussynth_karplusstrong__stereo_preemphasis(-63,64,1)
					set_control_par(get_ui_id($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_karplusstrong))
					set_control_par_str(get_ui_id($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_AUTOMATION_NAME,"stereo_preemphasis")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_POS_X, (88 + 2) * 1)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_TEXT, " " & "image")
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_HELP, "Mid-Side processing pre- and deemphasis.")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_karplusstrong__stereo_preemphasis)
					read_persistent_var($knob_bussynth_karplusstrong__stereo_preemphasis)

				declare $bussynth_karplusstrong_frequency

				declare ui_knob $knob_bussynth_karplusstrong__freq_numerator(1,128,1)
					set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_karplusstrong))
					set_control_par_str(get_ui_id($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_AUTOMATION_NAME,"freq_numerator")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_POS_X, (88 + 2) * 2)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_TEXT, "    " & "*")
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_HELP, "Multiplier numerator of the fundamental frequency of notes synthesized by Karplus-Strong algorithm.")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_karplusstrong__freq_numerator)
					read_persistent_var($knob_bussynth_karplusstrong__freq_numerator)

				declare ui_knob $knob_bussynth_karplusstrong__freq_denominator(1,128,1)
					set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_karplusstrong))
					set_control_par_str(get_ui_id($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_AUTOMATION_NAME,"freq_denominator")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_POS_X, (88 + 2) * 3)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_TEXT, "    " & "/")
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_HELP, "Multiplier denominator of the fundamental frequency of notes synthesized by Karplus-Strong algorithm.")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_karplusstrong__freq_denominator)
					read_persistent_var($knob_bussynth_karplusstrong__freq_denominator)

				declare ui_knob $knob_bussynth_karplusstrong__dry_signal_lvl(0,127,1)
					set_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_karplusstrong))
					set_control_par_str(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_AUTOMATION_NAME,"dry_signal_lvl")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_POS_X, (88 + 2) * 4)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_TEXT, "   " & "dry")
					set_control_par_str(get_ui_id ($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_HELP, "Dry signal amount.")
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($knob_bussynth_karplusstrong__dry_signal_lvl)
					read_persistent_var($knob_bussynth_karplusstrong__dry_signal_lvl)

				declare ui_switch $switch_bussynth_karplusstrong_latch_freq
					set_control_par(get_ui_id($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bussynth_karplusstrong))
					set_control_par_str(get_ui_id($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_AUTOMATION_NAME,"karplusstrong_track_pitch")
					set_control_par(get_ui_id($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_WIDTH, (88+2)*2-2)
					set_control_par(get_ui_id($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_HEIGHT, 15)
					set_control_par(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_POS_X, (88 + 2) * 2)
					set_control_par(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_POS_Y,2)
					set_control_par_str(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_TEXT, "[ follow pitch ]")
					set_control_par(get_ui_id($switch_bussynth_karplusstrong_latch_freq), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par_str(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_HELP, "Delay time denominator in relation to the fundamental frequency of the note")
					set_control_par(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_VALUE, 0)
					set_control_par(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($switch_bussynth_karplusstrong_latch_freq)
					read_persistent_var($switch_bussynth_karplusstrong_latch_freq)
					select ($switch_bussynth_karplusstrong_latch_freq)
						case 0
							set_control_par_str(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_TEXT, "[ follow pitch ]")
							set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
							set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						case 1
							set_control_par_str(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_TEXT, "[ latch freq ]")
							set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
							set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
					end select
	end if






	{send fx panel:}

	if(1=1)


		declare %ksp_sendlevel_par[8]
		%ksp_sendlevel_par[0] := $ENGINE_PAR_SENDLEVEL_0
		%ksp_sendlevel_par[1] := $ENGINE_PAR_SENDLEVEL_1
		%ksp_sendlevel_par[2] := $ENGINE_PAR_SENDLEVEL_2
		%ksp_sendlevel_par[3] := $ENGINE_PAR_SENDLEVEL_3
		%ksp_sendlevel_par[4] := $ENGINE_PAR_SENDLEVEL_4
		%ksp_sendlevel_par[5] := $ENGINE_PAR_SENDLEVEL_5
		%ksp_sendlevel_par[6] := $ENGINE_PAR_SENDLEVEL_6
		%ksp_sendlevel_par[7] := $ENGINE_PAR_SENDLEVEL_7

		declare ui_panel $panel__delay_effects
			set_control_par(get_ui_id($panel__delay_effects),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__send_effects_controls))
			set_control_par(get_ui_id ($panel__delay_effects),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($panel__delay_effects),$CONTROL_PAR_POS_Y,40)


		declare ui_panel $panel__after_send_gain
			set_control_par(get_ui_id($panel__after_send_gain),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__send_effects_controls))
			set_control_par(get_ui_id ($panel__after_send_gain),$CONTROL_PAR_POS_X, 20)
			set_control_par(get_ui_id ($panel__after_send_gain),$CONTROL_PAR_POS_Y, 40+1)
		declare ui_label $label__after_send_gain(1,1)
			set_control_par(get_ui_id($label__after_send_gain),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__after_send_gain))
			set_control_par(get_ui_id($label__after_send_gain),$CONTROL_PAR_WIDTH, 88)
			set_control_par(get_ui_id ($label__after_send_gain),$CONTROL_PAR_POS_X, 0)
			set_control_par(get_ui_id ($label__after_send_gain),$CONTROL_PAR_POS_Y, 0)
			set_control_par_str(get_ui_id ($label__after_send_gain),$CONTROL_PAR_TEXT, " " & "d r y  l v l :")
			set_control_par_str(get_ui_id ($label__after_send_gain),$CONTROL_PAR_HELP, "dry signal level")
			set_control_par(get_ui_id ($label__after_send_gain),$CONTROL_PAR_TEXT_ALIGNMENT, 0)
	
		declare ui_knob $knob__after_send_gain(0,127,1)
			set_control_par(get_ui_id($knob__after_send_gain),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__after_send_gain))
			set_control_par_str(get_ui_id($knob__after_send_gain),$CONTROL_PAR_AUTOMATION_NAME,"dry_signal_lvl")
			set_control_par(get_ui_id ($knob__after_send_gain),$CONTROL_PAR_POS_X, 0)
			set_control_par(get_ui_id ($knob__after_send_gain),$CONTROL_PAR_POS_Y, 22)
			set_control_par_str(get_ui_id ($knob__after_send_gain),$CONTROL_PAR_TEXT, "  " & "dry")
			set_control_par_str(get_ui_id ($knob__after_send_gain),$CONTROL_PAR_HELP, "Dry signal level")
			set_control_par(get_ui_id ($knob__after_send_gain),$CONTROL_PAR_VALUE, 100)
			set_control_par(get_ui_id ($knob__after_send_gain),$CONTROL_PAR_DEFAULT_VALUE, 100)
			make_persistent($knob__after_send_gain)
			read_persistent_var($knob__after_send_gain)
			set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, (1000000 * (get_control_par(get_ui_id($knob__after_send_gain),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob__after_send_gain),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob__after_send_gain),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob__after_send_gain),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__gain, $NI_INSERT_BUS)
			
			set_engine_par($ENGINE_PAR_SEND_EFFECT_DRY_LEVEL, 0, -1, $insertfx_slot_num__gain, $NI_INSERT_BUS)

		{delay A:}
		
		set_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE, $EFFECT_TYPE_REPLIKA, -1, $sendfx_slot_num__replika_delay_A, $NI_SEND_BUS)
		set_engine_par($ENGINE_PAR_RDL_TYPE, $NI_REPLIKA_TYPE_ANALOGUE, -1, $sendfx_slot_num__replika_delay_A, $NI_SEND_BUS)
		set_engine_par($ENGINE_PAR_RDL_BBDTYPE,  1000000, -1, $sendfx_slot_num__replika_delay_A, $NI_SEND_BUS)

		declare ui_panel $panel__delay_A
			set_control_par(get_ui_id($panel__delay_A),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_effects))
			set_control_par(get_ui_id ($panel__delay_A),$CONTROL_PAR_POS_X,128)
			set_control_par(get_ui_id ($panel__delay_A),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label_delay_A(1,1)
				set_control_par(get_ui_id($label_delay_A),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A))
				set_control_par(get_ui_id($label_delay_A),$CONTROL_PAR_WIDTH, 66)
				set_control_par(get_ui_id ($label_delay_A),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_delay_A),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label_delay_A),$CONTROL_PAR_TEXT, "d e l a y  A :")
				set_control_par_str(get_ui_id ($label_delay_A),$CONTROL_PAR_HELP, "Delay A module settings.")

			declare ui_switch $switch_delay_A_toggle
				set_control_par(get_ui_id($switch_delay_A_toggle),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A))
				set_control_par_str(get_ui_id($switch_delay_A_toggle),$CONTROL_PAR_AUTOMATION_NAME,"toggle_delay_A")
				set_control_par(get_ui_id($switch_delay_A_toggle),$CONTROL_PAR_WIDTH, 39)
				set_control_par(get_ui_id($switch_delay_A_toggle),$CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id ($switch_delay_A_toggle),$CONTROL_PAR_POS_X, 68)
				set_control_par(get_ui_id ($switch_delay_A_toggle),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($switch_delay_A_toggle),$CONTROL_PAR_TEXT, "[  ]")
				set_control_par(get_ui_id($switch_delay_A_toggle), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch_delay_A_toggle),$CONTROL_PAR_HELP, "Toggle the FX module.")
				set_control_par(get_ui_id ($switch_delay_A_toggle),$CONTROL_PAR_DEFAULT_VALUE, 0)
				make_persistent($switch_delay_A_toggle)
				read_persistent_var($switch_delay_A_toggle)
				select ($switch_delay_A_toggle)
					case 0
						set_control_par_str(get_ui_id ($switch_delay_A_toggle),$CONTROL_PAR_TEXT, "[ off ]")
					case 1
						set_control_par_str(get_ui_id ($switch_delay_A_toggle),$CONTROL_PAR_TEXT, "[ ON ]")
				end select
				set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS, ($switch_delay_A_toggle-1)*(-1), -1, $sendfx_slot_num__replika_delay_A, $NI_SEND_BUS)

			declare ui_panel $panel__delay_A_time
				set_control_par(get_ui_id($panel__delay_A_time),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A))
				set_control_par(get_ui_id ($panel__delay_A_time),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__delay_A_time),$CONTROL_PAR_POS_Y,112)

			declare ui_label $label_delay_A_time(1,1)
				set_control_par(get_ui_id($label_delay_A_time),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A_time))
				set_control_par(get_ui_id($label_delay_A_time),$CONTROL_PAR_WIDTH,88)
				set_control_par(get_ui_id ($label_delay_A_time),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_delay_A_time),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label_delay_A_time),$CONTROL_PAR_TEXT, " t i m e :")
				set_control_par_str(get_ui_id ($label_delay_A_time),$CONTROL_PAR_HELP, "delay time numerator and denominator in relation to the bar length")

				declare ui_knob $knob_delay_A_time_numerator(1,128,1)
					set_control_par(get_ui_id($knob_delay_A_time_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A_time))
					set_control_par_str(get_ui_id($knob_delay_A_time_numerator),$CONTROL_PAR_AUTOMATION_NAME,"delay_A_time_numerator")
					set_control_par(get_ui_id ($knob_delay_A_time_numerator),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($knob_delay_A_time_numerator),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_delay_A_time_numerator),$CONTROL_PAR_TEXT, "   " & "*")
					set_control_par_str(get_ui_id ($knob_delay_A_time_numerator),$CONTROL_PAR_HELP, "Delay time numerator in relation to the bar length")
					set_control_par(get_ui_id ($knob_delay_A_time_numerator),$CONTROL_PAR_VALUE, 3)
					set_control_par(get_ui_id ($knob_delay_A_time_numerator),$CONTROL_PAR_DEFAULT_VALUE, 1)
					make_persistent($knob_delay_A_time_numerator)
					read_persistent_var($knob_delay_A_time_numerator)

				declare ui_knob $knob_delay_A_time_denominator(1,128,1)
					set_control_par(get_ui_id($knob_delay_A_time_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A_time))
					set_control_par_str(get_ui_id($knob_delay_A_time_denominator),$CONTROL_PAR_AUTOMATION_NAME,"delay_A_time_denominator")
					set_control_par(get_ui_id ($knob_delay_A_time_denominator),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($knob_delay_A_time_denominator),$CONTROL_PAR_POS_Y,22+44)
					set_control_par_str(get_ui_id ($knob_delay_A_time_denominator),$CONTROL_PAR_TEXT, "   " & "/")
					set_control_par_str(get_ui_id ($knob_delay_A_time_denominator),$CONTROL_PAR_HELP, "Delay time denominator in relation to the bar length")
					set_control_par(get_ui_id ($knob_delay_A_time_denominator),$CONTROL_PAR_VALUE, 16)
					set_control_par(get_ui_id ($knob_delay_A_time_denominator),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($knob_delay_A_time_denominator)
					read_persistent_var($knob_delay_A_time_denominator)

				declare $sendfx_replika_delay_A_time
				$sendfx_replika_delay_A_time := ($DURATION_QUARTER * $SIGNATURE_NUM * $SIGNATURE_DENOM / 4) * get_control_par(get_ui_id($knob_delay_A_time_numerator), $CONTROL_PAR_VALUE) / get_control_par(get_ui_id($knob_delay_A_time_denominator), $CONTROL_PAR_VALUE)
				set_engine_par($ENGINE_PAR_RDL_TIME, $sendfx_replika_delay_A_time / 2, -1, $sendfx_slot_num__replika_delay_A, $NI_SEND_BUS)

			declare ui_panel $panel__delay_A_levels
				set_control_par(get_ui_id($panel__delay_A_levels),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A))
				set_control_par(get_ui_id ($panel__delay_A_levels),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__delay_A_levels),$CONTROL_PAR_POS_Y,22)

				declare ui_label $label_delay_A_send_level(1,1)
					set_control_par(get_ui_id($label_delay_A_send_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A_levels))
					set_control_par(get_ui_id($label_delay_A_send_level),$CONTROL_PAR_WIDTH,88)
					set_control_par(get_ui_id ($label_delay_A_send_level),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label_delay_A_send_level),$CONTROL_PAR_POS_Y,0)
					set_control_par_str(get_ui_id ($label_delay_A_send_level),$CONTROL_PAR_TEXT, " s e n d :")
					set_control_par_str(get_ui_id ($label_delay_A_send_level),$CONTROL_PAR_HELP, "Gain controls for delay A.")


				declare ui_slider $knob_delay_A_send_level(0,127)
					set_control_par(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A_levels))
					set_control_par_str(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_AUTOMATION_NAME,"delay_A_send_level")
					set_control_par(get_ui_id ($knob_delay_A_send_level),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($knob_delay_A_send_level),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_delay_A_send_level),$CONTROL_PAR_TEXT, " " & "send")
					set_control_par_str(get_ui_id ($knob_delay_A_send_level),$CONTROL_PAR_HELP, "Send level to delay A.")
					set_control_par(get_ui_id ($knob_delay_A_send_level),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($knob_delay_A_send_level),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($knob_delay_A_send_level)
					read_persistent_var($knob_delay_A_send_level)
					set_engine_par(%ksp_sendlevel_par[$sendfx_slot_num__replika_delay_A], (1000000 * (get_control_par(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__send_levels, $NI_INSERT_BUS)

				declare ui_label $label_delay_A_feedback(1,1)
					set_control_par(get_ui_id($label_delay_A_feedback),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A_levels))
					set_control_par(get_ui_id($label_delay_A_feedback),$CONTROL_PAR_WIDTH,88)
					set_control_par(get_ui_id ($label_delay_A_feedback),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label_delay_A_feedback),$CONTROL_PAR_POS_Y,22*2)
					set_control_par_str(get_ui_id ($label_delay_A_feedback),$CONTROL_PAR_TEXT, " f e e d b a c k :")
					set_control_par_str(get_ui_id ($label_delay_A_feedback),$CONTROL_PAR_HELP, "Feedback gain of delay A.")

				declare ui_slider $knob_delay_A_feedback_level(0,127)
					set_control_par(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_A_levels))
					set_control_par_str(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_AUTOMATION_NAME,"delay_A_feedback_level")
					set_control_par(get_ui_id ($knob_delay_A_feedback_level),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($knob_delay_A_feedback_level),$CONTROL_PAR_POS_Y,22*3)
					set_control_par_str(get_ui_id ($knob_delay_A_feedback_level),$CONTROL_PAR_TEXT, " " & "feedback")
					set_control_par_str(get_ui_id ($knob_delay_A_feedback_level),$CONTROL_PAR_HELP, "Feedback gain of delay A.")
					set_control_par(get_ui_id ($knob_delay_A_feedback_level),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($knob_delay_A_feedback_level),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($knob_delay_A_feedback_level)
					read_persistent_var($knob_delay_A_feedback_level)
					set_engine_par($ENGINE_PAR_RDL_FEEDBACK, (1000000 * (get_control_par(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $sendfx_slot_num__replika_delay_A, $NI_SEND_BUS)


		{delay B:}
		set_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE, $EFFECT_TYPE_REPLIKA, -1, $sendfx_slot_num__replika_delay_B, $NI_SEND_BUS)
		set_engine_par($ENGINE_PAR_RDL_TYPE, $NI_REPLIKA_TYPE_VINTAGE, -1, $sendfx_slot_num__replika_delay_B, $NI_SEND_BUS)
		set_engine_par($ENGINE_PAR_RDL_QUALITY,  654321, -1, $sendfx_slot_num__replika_delay_B, $NI_SEND_BUS)

		declare ui_panel $panel__delay_B
			set_control_par(get_ui_id($panel__delay_B),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_effects))
			set_control_par(get_ui_id ($panel__delay_B),$CONTROL_PAR_POS_X,246)
			set_control_par(get_ui_id ($panel__delay_B),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label_delay_B(1,1)
				set_control_par(get_ui_id($label_delay_B),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B))
				set_control_par(get_ui_id($label_delay_B),$CONTROL_PAR_WIDTH, 66)
				set_control_par(get_ui_id ($label_delay_B),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_delay_B),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label_delay_B),$CONTROL_PAR_TEXT, "d e l a y  B :")
				set_control_par_str(get_ui_id ($label_delay_B),$CONTROL_PAR_HELP, "Delay A module settings.")

			declare ui_switch $switch_delay_B_toggle
				set_control_par(get_ui_id($switch_delay_B_toggle),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B))
				set_control_par_str(get_ui_id($switch_delay_B_toggle),$CONTROL_PAR_AUTOMATION_NAME,"toggle_delay_B")
				set_control_par(get_ui_id($switch_delay_B_toggle),$CONTROL_PAR_WIDTH, 39)
				set_control_par(get_ui_id($switch_delay_B_toggle),$CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id ($switch_delay_B_toggle),$CONTROL_PAR_POS_X, 68)
				set_control_par(get_ui_id ($switch_delay_B_toggle),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($switch_delay_B_toggle),$CONTROL_PAR_TEXT, "[  ]")
				set_control_par(get_ui_id($switch_delay_B_toggle), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch_delay_B_toggle),$CONTROL_PAR_HELP, "Toggle the FX module.")
				set_control_par(get_ui_id ($switch_delay_B_toggle),$CONTROL_PAR_DEFAULT_VALUE, 0)
				make_persistent($switch_delay_B_toggle)
				read_persistent_var($switch_delay_B_toggle)
				select ($switch_delay_B_toggle)
					case 0
						set_control_par_str(get_ui_id ($switch_delay_B_toggle),$CONTROL_PAR_TEXT, "[ off ]")
					case 1
						set_control_par_str(get_ui_id ($switch_delay_B_toggle),$CONTROL_PAR_TEXT, "[ ON ]")
				end select
			set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS, ($switch_delay_B_toggle-1)*(-1), -1, $sendfx_slot_num__replika_delay_B, $NI_SEND_BUS)

			declare ui_panel $panel__delay_B_time
				set_control_par(get_ui_id($panel__delay_B_time),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B))
				set_control_par(get_ui_id ($panel__delay_B_time),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__delay_B_time),$CONTROL_PAR_POS_Y,112)

			declare ui_label $label_delay_B_time(1,1)
				set_control_par(get_ui_id($label_delay_B_time),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B_time))
				set_control_par(get_ui_id($label_delay_B_time),$CONTROL_PAR_WIDTH,88)
				set_control_par(get_ui_id ($label_delay_B_time),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_delay_B_time),$CONTROL_PAR_POS_Y,0)
				set_control_par_str(get_ui_id ($label_delay_B_time),$CONTROL_PAR_TEXT, " t i m e :")
				set_control_par_str(get_ui_id ($label_delay_B_time),$CONTROL_PAR_HELP, "delay time numerator and denominator in relation to the bar length")

				declare ui_knob $knob_delay_B_time_numerator(1,128,1)
					set_control_par(get_ui_id($knob_delay_B_time_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B_time))
					set_control_par_str(get_ui_id($knob_delay_B_time_numerator),$CONTROL_PAR_AUTOMATION_NAME,"delay_B_time_numerator")
					set_control_par(get_ui_id ($knob_delay_B_time_numerator),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($knob_delay_B_time_numerator),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_delay_B_time_numerator),$CONTROL_PAR_TEXT, "   " & "*")
					set_control_par_str(get_ui_id ($knob_delay_B_time_numerator),$CONTROL_PAR_HELP, "Delay time numerator in relation to the bar length")
					set_control_par(get_ui_id ($knob_delay_B_time_numerator),$CONTROL_PAR_VALUE, 3)
					set_control_par(get_ui_id ($knob_delay_B_time_numerator),$CONTROL_PAR_DEFAULT_VALUE, 1)
					make_persistent($knob_delay_B_time_numerator)
					read_persistent_var($knob_delay_B_time_numerator)

				declare ui_knob $knob_delay_B_time_denominator(1,128,1)
					set_control_par(get_ui_id($knob_delay_B_time_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B_time))
					set_control_par_str(get_ui_id($knob_delay_B_time_denominator),$CONTROL_PAR_AUTOMATION_NAME,"delay_B_time_denominator")
					set_control_par(get_ui_id ($knob_delay_B_time_denominator),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($knob_delay_B_time_denominator),$CONTROL_PAR_POS_Y,22+44)
					set_control_par_str(get_ui_id ($knob_delay_B_time_denominator),$CONTROL_PAR_TEXT, "   " & "/")
					set_control_par_str(get_ui_id ($knob_delay_B_time_denominator),$CONTROL_PAR_HELP, "Delay time denominator in relation to the bar length")
					set_control_par(get_ui_id ($knob_delay_B_time_denominator),$CONTROL_PAR_VALUE, 16)
					set_control_par(get_ui_id ($knob_delay_B_time_denominator),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($knob_delay_B_time_denominator)
					read_persistent_var($knob_delay_B_time_denominator)

				declare $sendfx_replika_delay_B_time
				$sendfx_replika_delay_B_time := ($DURATION_QUARTER * $SIGNATURE_NUM * $SIGNATURE_DENOM / 4) * get_control_par(get_ui_id($knob_delay_B_time_numerator), $CONTROL_PAR_VALUE) / get_control_par(get_ui_id($knob_delay_B_time_denominator), $CONTROL_PAR_VALUE)
				set_engine_par($ENGINE_PAR_RDL_TIME, $sendfx_replika_delay_B_time / 2, -1, $sendfx_slot_num__replika_delay_B, $NI_SEND_BUS)

				declare ui_panel $panel__delay_B_levels
					set_control_par(get_ui_id($panel__delay_B_levels),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B))
					set_control_par(get_ui_id ($panel__delay_B_levels),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($panel__delay_B_levels),$CONTROL_PAR_POS_Y,22)

				declare ui_label $label_delay_B_send_level(1,1)
					set_control_par(get_ui_id($label_delay_B_send_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B_levels))
					set_control_par(get_ui_id($label_delay_B_send_level),$CONTROL_PAR_WIDTH,88)
					set_control_par(get_ui_id ($label_delay_B_send_level),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label_delay_B_send_level),$CONTROL_PAR_POS_Y,0)
					set_control_par_str(get_ui_id ($label_delay_B_send_level),$CONTROL_PAR_TEXT, " s e n d :")
					set_control_par_str(get_ui_id ($label_delay_B_send_level),$CONTROL_PAR_HELP, "Gain controls for delay A.")


				declare ui_slider $knob_delay_B_send_level(0,127)
					set_control_par(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B_levels))
					set_control_par_str(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_AUTOMATION_NAME,"delay_B_send_level")
					set_control_par(get_ui_id ($knob_delay_B_send_level),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($knob_delay_B_send_level),$CONTROL_PAR_POS_Y,22)
					set_control_par_str(get_ui_id ($knob_delay_B_send_level),$CONTROL_PAR_TEXT, " " & "send")
					set_control_par_str(get_ui_id ($knob_delay_B_send_level),$CONTROL_PAR_HELP, "Send level to delay B.")
					set_control_par(get_ui_id ($knob_delay_B_send_level),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($knob_delay_B_send_level),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($knob_delay_B_send_level)
					read_persistent_var($knob_delay_B_send_level)
					set_engine_par(%ksp_sendlevel_par[$sendfx_slot_num__replika_delay_B], (1000000 * (get_control_par(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__send_levels, $NI_INSERT_BUS)

				declare ui_label $label_delay_B_feedback(1,1)
					set_control_par(get_ui_id($label_delay_B_feedback),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B_levels))
					set_control_par(get_ui_id($label_delay_B_feedback),$CONTROL_PAR_WIDTH,88)
					set_control_par(get_ui_id ($label_delay_B_feedback),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label_delay_B_feedback),$CONTROL_PAR_POS_Y,22*2)
					set_control_par_str(get_ui_id ($label_delay_B_feedback),$CONTROL_PAR_TEXT, " f e e d b a c k :")
					set_control_par_str(get_ui_id ($label_delay_B_feedback),$CONTROL_PAR_HELP, "Feedback gain of delay A.")

				declare ui_slider $knob_delay_B_feedback_level(0,127)
					set_control_par(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_B_levels))
					set_control_par_str(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_AUTOMATION_NAME,"delay_B_feedback_level")
					set_control_par(get_ui_id ($knob_delay_B_feedback_level),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($knob_delay_B_feedback_level),$CONTROL_PAR_POS_Y,22*3)
					set_control_par_str(get_ui_id ($knob_delay_B_feedback_level),$CONTROL_PAR_TEXT, " " & "feedback")
					set_control_par_str(get_ui_id ($knob_delay_B_feedback_level),$CONTROL_PAR_HELP, "Feedback gain of delay A.")
					set_control_par(get_ui_id ($knob_delay_B_feedback_level),$CONTROL_PAR_VALUE, 64)
					set_control_par(get_ui_id ($knob_delay_B_feedback_level),$CONTROL_PAR_DEFAULT_VALUE, 64)
					make_persistent($knob_delay_B_feedback_level)
					read_persistent_var($knob_delay_B_feedback_level)
					set_engine_par($ENGINE_PAR_RDL_FEEDBACK, (1000000 * (get_control_par(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $sendfx_slot_num__replika_delay_B, $NI_SEND_BUS)


	end if




	{karplus strong}
	if(1=1)
				declare $sendfx_karplus_strong_frequency := 1000

				set_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE, $EFFECT_TYPE_REPLIKA, -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)
				set_engine_par($ENGINE_PAR_RDL_TYPE, $NI_REPLIKA_TYPE_TAPE, -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)
				set_engine_par($ENGINE_PAR_RDL_FLUTTER, 0, -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)

				declare ui_panel $panel__delay_karplusstrong
					set_control_par(get_ui_id($panel__delay_karplusstrong),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_effects))
					set_control_par(get_ui_id ($panel__delay_karplusstrong),$CONTROL_PAR_POS_X,372)
					set_control_par(get_ui_id ($panel__delay_karplusstrong),$CONTROL_PAR_POS_Y,0)

					declare ui_label $label_delay_karplusstrong(1,1)
						set_control_par(get_ui_id($label_delay_karplusstrong),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong))
						set_control_par(get_ui_id($label_delay_karplusstrong),$CONTROL_PAR_WIDTH, (88+2)*2)
						set_control_par(get_ui_id ($label_delay_karplusstrong),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($label_delay_karplusstrong),$CONTROL_PAR_POS_Y,0)
						set_control_par_str(get_ui_id ($label_delay_karplusstrong),$CONTROL_PAR_TEXT, " k a r p l u s - s t r o n g :")
						set_control_par_str(get_ui_id ($label_delay_karplusstrong),$CONTROL_PAR_HELP, "Karplus-Strong synthesis module settings.")

					declare ui_switch $switch_delay_karplusstrong_sendfx
						set_control_par(get_ui_id($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong))
						set_control_par_str(get_ui_id($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_AUTOMATION_NAME,"toggle_karplusstrong_module")
						set_control_par(get_ui_id($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_WIDTH, 40)
						set_control_par(get_ui_id($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_HEIGHT, 18)
						set_control_par(get_ui_id ($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_POS_X, (88 + 2) * 2 - 40)
						set_control_par(get_ui_id ($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_POS_Y,0)
						set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_TEXT, "[  ]")
						set_control_par(get_ui_id($switch_delay_karplusstrong_sendfx), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
						set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_HELP, "Toggle the FX module.")
						set_control_par(get_ui_id ($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_DEFAULT_VALUE, 0)
						make_persistent($switch_delay_karplusstrong_sendfx)
						read_persistent_var($switch_delay_karplusstrong_sendfx)
						select ($switch_delay_karplusstrong_sendfx)
							case 0
								set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_TEXT, "[ off ]")
							case 1
								set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_TEXT, "[ ON ]")
						end select
						set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS, ($switch_delay_karplusstrong_sendfx-1)*(-1), -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)

					declare ui_panel $panel__delay_karplusstrong_time
						set_control_par(get_ui_id($panel__delay_karplusstrong_time),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong))
						set_control_par(get_ui_id ($panel__delay_karplusstrong_time),$CONTROL_PAR_POS_X,92)
						set_control_par(get_ui_id ($panel__delay_karplusstrong_time),$CONTROL_PAR_POS_Y,22)

					declare ui_label $label_delay_karplusstrong_time(1,1)
						set_control_par(get_ui_id($label_delay_karplusstrong_time),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_time))
						set_control_par(get_ui_id($label_delay_karplusstrong_time),$CONTROL_PAR_WIDTH,88)
						set_control_par(get_ui_id ($label_delay_karplusstrong_time),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($label_delay_karplusstrong_time),$CONTROL_PAR_POS_Y,0)
						set_control_par_str(get_ui_id ($label_delay_karplusstrong_time),$CONTROL_PAR_TEXT, " t i m e :")
						set_control_par_str(get_ui_id ($label_delay_karplusstrong_time),$CONTROL_PAR_HELP, "delay time numerator and denominator in relation to the bar length")

						declare ui_knob $knob_delay_karplusstrong_time_numerator(1,128,1)
							set_control_par(get_ui_id($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_time))
							set_control_par_str(get_ui_id($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_AUTOMATION_NAME,"delay_karplusstrong_time_numerator")
							set_control_par(get_ui_id ($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_POS_X,0)
							set_control_par(get_ui_id ($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_POS_Y,22)
							set_control_par_str(get_ui_id ($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_TEXT, "   " & "*")
							set_control_par_str(get_ui_id ($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_HELP, "Delay time numerator in relation to the fundamental frequency of the note")
							set_control_par(get_ui_id ($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_VALUE, 3)
							set_control_par(get_ui_id ($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_DEFAULT_VALUE, 1)
							make_persistent($knob_delay_karplusstrong_time_numerator)
							read_persistent_var($knob_delay_karplusstrong_time_numerator)

						declare ui_knob $knob_delay_karplusstrong_time_denominator(1,128,1)
							set_control_par(get_ui_id($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_time))
							set_control_par_str(get_ui_id($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_AUTOMATION_NAME,"delay_karplusstrong_time_denominator")
							set_control_par(get_ui_id ($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_POS_X,0)
							set_control_par(get_ui_id ($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_POS_Y,22+44)
							set_control_par_str(get_ui_id ($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_TEXT, "   " & "/")
							set_control_par_str(get_ui_id ($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_HELP, "Delay time denominator in relation to the fundamental frequency of the note")
							set_control_par(get_ui_id ($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_VALUE, 16)
							set_control_par(get_ui_id ($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_DEFAULT_VALUE, 64)
							make_persistent($knob_delay_karplusstrong_time_denominator)
							read_persistent_var($knob_delay_karplusstrong_time_denominator)

						declare ui_switch $switch_delay_karplusstrong_sendfx_latch_freq
							set_control_par(get_ui_id($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_time))
							set_control_par_str(get_ui_id($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_AUTOMATION_NAME,"karplusstrong_dont_track_pitch")
							set_control_par(get_ui_id($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_WIDTH, (88+2)*1-2)
							set_control_par(get_ui_id($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_HEIGHT, 18)
							set_control_par(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_POS_X, (88 + 2) * 0)
							set_control_par(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_POS_Y,0)
							set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_TEXT, "[ follow pitch ]")
							set_control_par(get_ui_id($switch_delay_karplusstrong_sendfx_latch_freq), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
							set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_HELP, "Delay time denominator in relation to the fundamental frequency of the note")
							set_control_par(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_VALUE, 0)
							set_control_par(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_DEFAULT_VALUE, 0)
							make_persistent($switch_delay_karplusstrong_sendfx_latch_freq)
							read_persistent_var($switch_delay_karplusstrong_sendfx_latch_freq)
							select ($switch_delay_karplusstrong_sendfx_latch_freq)
								case 0
									set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_TEXT, "[ follow pitch ]")
									set_control_par(get_ui_id($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
									set_control_par(get_ui_id($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
								case 1
									set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_TEXT, "[ latch freq ]")
									set_control_par(get_ui_id($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
									set_control_par(get_ui_id($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
							end select

					declare ui_panel $panel__delay_karplusstrong_levels
						set_control_par(get_ui_id($panel__delay_karplusstrong_levels),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong))
						set_control_par(get_ui_id ($panel__delay_karplusstrong_levels),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($panel__delay_karplusstrong_levels),$CONTROL_PAR_POS_Y,22)

					declare ui_label $label_delay_karplusstrong_send_level(1,1)
						set_control_par(get_ui_id($label_delay_karplusstrong_send_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_levels))
						set_control_par(get_ui_id($label_delay_karplusstrong_send_level),$CONTROL_PAR_WIDTH,88)
						set_control_par(get_ui_id ($label_delay_karplusstrong_send_level),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($label_delay_karplusstrong_send_level),$CONTROL_PAR_POS_Y,22*0)
						set_control_par_str(get_ui_id ($label_delay_karplusstrong_send_level),$CONTROL_PAR_TEXT, " s e n d :")
						set_control_par_str(get_ui_id ($label_delay_karplusstrong_send_level),$CONTROL_PAR_HELP, "Controls the input levels of the Karplus-Strong synth.")


					declare ui_slider $knob_delay_karplusstrong_send_level(0,127)
						set_control_par(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_levels))
						set_control_par_str(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_AUTOMATION_NAME,"delay_karplusstrong_send_level")
						set_control_par(get_ui_id ($knob_delay_karplusstrong_send_level),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($knob_delay_karplusstrong_send_level),$CONTROL_PAR_POS_Y,22*1)
						set_control_par_str(get_ui_id ($knob_delay_karplusstrong_send_level),$CONTROL_PAR_TEXT, " " & "send")
						set_control_par_str(get_ui_id ($knob_delay_karplusstrong_send_level),$CONTROL_PAR_HELP, "Send levels to the Karplus-Strong synthesis aux.")
						set_control_par(get_ui_id ($knob_delay_karplusstrong_send_level),$CONTROL_PAR_VALUE, 112)
						set_control_par(get_ui_id ($knob_delay_karplusstrong_send_level),$CONTROL_PAR_DEFAULT_VALUE, 112)
						make_persistent($knob_delay_karplusstrong_send_level)
						read_persistent_var($knob_delay_karplusstrong_send_level)
						set_engine_par(%ksp_sendlevel_par[$sendfx_slot_num__replika_karplus_strong], (1000000 * (get_control_par(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__send_levels, $NI_INSERT_BUS)

					declare ui_label $label_delay_karplusstrong_feedback_level(1,1)
						set_control_par(get_ui_id($label_delay_karplusstrong_feedback_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_levels))
						set_control_par(get_ui_id($label_delay_karplusstrong_feedback_level),$CONTROL_PAR_WIDTH,88)
						set_control_par(get_ui_id ($label_delay_karplusstrong_feedback_level),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($label_delay_karplusstrong_feedback_level),$CONTROL_PAR_POS_Y,22*2)
						set_control_par_str(get_ui_id ($label_delay_karplusstrong_feedback_level),$CONTROL_PAR_TEXT, " f e e d b a c k :")
						set_control_par_str(get_ui_id ($label_delay_karplusstrong_feedback_level),$CONTROL_PAR_HELP, "Feedback levels of the Karplus-Strong delay line.")

					declare ui_slider $knob_delay_karplusstrong_feedback_level(0,127)
						set_control_par(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_levels))
						set_control_par_str(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_AUTOMATION_NAME,"delay_karplusstrong_feedback_level")
						set_control_par(get_ui_id ($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_POS_Y,22*3)
						set_control_par_str(get_ui_id ($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_TEXT, " " & "feedback")
						set_control_par_str(get_ui_id ($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_HELP, "Feedback levels of the Karplus-Strong delay line.")
						set_control_par(get_ui_id ($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_VALUE, 74)
						set_control_par(get_ui_id ($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_DEFAULT_VALUE, 74)
						make_persistent($knob_delay_karplusstrong_feedback_level)
						read_persistent_var($knob_delay_karplusstrong_feedback_level)
						declare $calc_karplusstrong_feedback_level
						$calc_karplusstrong_feedback_level := (get_control_par(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_MIN_VALUE))
						$calc_karplusstrong_feedback_level := real_to_int( exp( log(1000000.0) * int_to_real($calc_karplusstrong_feedback_level) / int_to_real($calc_karplusstrong_feedback_level + 1)  ) )
						set_engine_par($ENGINE_PAR_RDL_FEEDBACK, $calc_karplusstrong_feedback_level, -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)

					declare ui_label $label_delay_karplusstrong_return_level(1,1)
						set_control_par(get_ui_id($label_delay_karplusstrong_return_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_levels))
						set_control_par(get_ui_id($label_delay_karplusstrong_return_level),$CONTROL_PAR_WIDTH,88)
						set_control_par(get_ui_id ($label_delay_karplusstrong_return_level),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($label_delay_karplusstrong_return_level),$CONTROL_PAR_POS_Y,22*4)
						set_control_par_str(get_ui_id ($label_delay_karplusstrong_return_level),$CONTROL_PAR_TEXT, " r e t u r n :")
						set_control_par_str(get_ui_id ($label_delay_karplusstrong_return_level),$CONTROL_PAR_HELP, "Return level from the Karplus-Strong delay line.")

					declare ui_slider $knob_delay_karplusstrong_return_level(0,127)
						set_control_par(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__delay_karplusstrong_levels))
						set_control_par_str(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_AUTOMATION_NAME,"knob_delay_karplusstrong_return_level")
						set_control_par(get_ui_id ($knob_delay_karplusstrong_return_level),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($knob_delay_karplusstrong_return_level),$CONTROL_PAR_POS_Y,22*5)
						set_control_par_str(get_ui_id ($knob_delay_karplusstrong_return_level),$CONTROL_PAR_TEXT, " " & "return")
						set_control_par_str(get_ui_id ($knob_delay_karplusstrong_return_level),$CONTROL_PAR_HELP, "Feedback levels of the Karplus-Strong delay line.")
						set_control_par(get_ui_id ($knob_delay_karplusstrong_return_level),$CONTROL_PAR_VALUE, 63)
						set_control_par(get_ui_id ($knob_delay_karplusstrong_return_level),$CONTROL_PAR_DEFAULT_VALUE, 63)
						make_persistent($knob_delay_karplusstrong_return_level)
						read_persistent_var($knob_delay_karplusstrong_return_level)
						set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, (1000000 * (get_control_par(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)
	end if
	if(1=1)

				declare ui_panel $panel__reverb_send
					set_control_par(get_ui_id($panel__reverb_send),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__send_effects_controls))
					set_control_par(get_ui_id ($panel__reverb_send),$CONTROL_PAR_POS_X,372+92)
					set_control_par(get_ui_id ($panel__reverb_send),$CONTROL_PAR_POS_Y,196)

					declare ui_label $label_reverb_send(1,1)
						set_control_par(get_ui_id($label_reverb_send),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__reverb_send))
						set_control_par(get_ui_id($label_reverb_send),$CONTROL_PAR_WIDTH,88)
						set_control_par(get_ui_id ($label_reverb_send),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($label_reverb_send),$CONTROL_PAR_POS_Y,0)
						set_control_par_str(get_ui_id ($label_reverb_send),$CONTROL_PAR_TEXT, "r e v e r b :")
						set_control_par_str(get_ui_id ($label_reverb_send),$CONTROL_PAR_HELP, "Reverb settings.")

					declare ui_label $label_reverb_send_level(1,1)
						set_control_par(get_ui_id($label_reverb_send_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__reverb_send))
						set_control_par(get_ui_id($label_reverb_send_level),$CONTROL_PAR_WIDTH,88)
						set_control_par(get_ui_id ($label_reverb_send_level),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($label_reverb_send_level),$CONTROL_PAR_POS_Y,22)
						set_control_par_str(get_ui_id ($label_reverb_send_level),$CONTROL_PAR_TEXT, " s e n d :")
						set_control_par_str(get_ui_id ($label_reverb_send_level),$CONTROL_PAR_HELP, "Reverb settings.")


					declare ui_slider $knob_reverb_send_level(0,127)
						set_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__reverb_send))
						set_control_par_str(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_AUTOMATION_NAME,"reverb_send_level")
						set_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_WIDTH,58)
						set_control_par(get_ui_id ($knob_reverb_send_level),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($knob_reverb_send_level),$CONTROL_PAR_POS_Y,22*2)
						set_control_par_str(get_ui_id ($knob_reverb_send_level),$CONTROL_PAR_TEXT, " " & "send")
						set_control_par_str(get_ui_id ($knob_reverb_send_level),$CONTROL_PAR_HELP, "Send level to delay A.")
						set_control_par(get_ui_id ($knob_reverb_send_level),$CONTROL_PAR_VALUE, 3)
						set_control_par(get_ui_id ($knob_reverb_send_level),$CONTROL_PAR_DEFAULT_VALUE, 1)
						make_persistent($knob_reverb_send_level)
						read_persistent_var($knob_reverb_send_level)
						set_engine_par(%ksp_sendlevel_par[$sendfx_slot_num__reverb], (1000000 * (get_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__send_levels, $NI_INSERT_BUS)

	end if

	if (1=1)

		declare const $top_button_bar_width := 358
			declare const $top_button_bar_spacing := 4
			declare const $top_button_bar_left_margin := 128
			declare const $top_button_bar_number_of_btns := 4
			declare const $top_button_bar_default_btn_width := (($top_button_bar_width + $top_button_bar_spacing) / $top_button_bar_number_of_btns)  - $top_button_bar_spacing
			declare $top_button_bar_column_width
				$top_button_bar_column_width := $top_button_bar_default_btn_width + $top_button_bar_spacing

				{((($top_button_bar_default_btn_width + $top_button_bar_spacing) * $top_button_bar_number_of_btns) - $top_button_bar_spacing) }
			declare const $top_sub_button_bar_line_spacing := 20

			declare ui_button $sample_control_panel_visibility
					$sample_control_panel_visibility := 1
					set_text($sample_control_panel_visibility,"[ sample ]")
					set_control_par(get_ui_id($sample_control_panel_visibility),$CONTROL_PAR_POS_X,$top_button_bar_left_margin+($top_button_bar_column_width*0))
					set_control_par(get_ui_id($sample_control_panel_visibility),$CONTROL_PAR_POS_Y,0)
					set_control_par(get_ui_id($sample_control_panel_visibility),$CONTROL_PAR_WIDTH,$top_button_bar_default_btn_width)
					set_control_par(get_ui_id($sample_control_panel_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($sample_control_panel_visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($top_navigation_ui_panel))
					make_persistent($sample_control_panel_visibility)
					read_persistent_var($sample_control_panel_visibility)
					select($sample_control_panel_visibility)
						case 0
							set_text($sample_control_panel_visibility,"[ sampler ]")
							set_control_par(get_ui_id($panel__sample_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_text($sample_control_panel_visibility,"[ s a m p l e r ]")
							set_control_par(get_ui_id($panel__sample_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
					end select

			declare ui_button $bus_effects_panel_visibility
					$bus_effects_panel_visibility := 0
					set_text($bus_effects_panel_visibility,"[ bus fx ]")
					set_control_par(get_ui_id($bus_effects_panel_visibility),$CONTROL_PAR_POS_X,$top_button_bar_left_margin+($top_button_bar_spacing/2)+($top_button_bar_column_width*1))
					set_control_par(get_ui_id($bus_effects_panel_visibility),$CONTROL_PAR_POS_Y,0)
					set_control_par(get_ui_id($bus_effects_panel_visibility),$CONTROL_PAR_WIDTH,$top_button_bar_default_btn_width)
					set_control_par(get_ui_id($bus_effects_panel_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($bus_effects_panel_visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($top_navigation_ui_panel))
					make_persistent($bus_effects_panel_visibility)
					read_persistent_var($bus_effects_panel_visibility)
					select($bus_effects_panel_visibility)
						case 0
							set_text($bus_effects_panel_visibility,"[ bus fx ]")
							set_control_par(get_ui_id($panel__bus_effect_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_text($bus_effects_panel_visibility,"[ b u s  f x ]")
							set_control_par(get_ui_id($panel__bus_effect_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
					end select

			declare ui_button $send_effects_panel_visibility
					$send_effects_panel_visibility := 0
					set_text($send_effects_panel_visibility,"[ aux fx ]")
					set_control_par(get_ui_id($send_effects_panel_visibility),$CONTROL_PAR_POS_X,$top_button_bar_left_margin+($top_button_bar_spacing/2)+($top_button_bar_column_width*2))
					set_control_par(get_ui_id($send_effects_panel_visibility),$CONTROL_PAR_POS_Y,0)
					set_control_par(get_ui_id($send_effects_panel_visibility),$CONTROL_PAR_WIDTH,$top_button_bar_default_btn_width)
					set_control_par(get_ui_id($send_effects_panel_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($send_effects_panel_visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($top_navigation_ui_panel))
					make_persistent($send_effects_panel_visibility)
					read_persistent_var($send_effects_panel_visibility)
					select($send_effects_panel_visibility)
						case 0
							set_text($send_effects_panel_visibility,"[ aux fx ]")
							set_control_par(get_ui_id($panel__send_effects_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_text($send_effects_panel_visibility,"[ a u x  f x ]")
							set_control_par(get_ui_id($panel__send_effects_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
					end select

			declare ui_button $panner_panel_visibility
					$panner_panel_visibility := 0
					set_text($panner_panel_visibility,"[ aux fx ]")
					set_control_par(get_ui_id($panner_panel_visibility),$CONTROL_PAR_POS_X,$top_button_bar_left_margin+($top_button_bar_spacing/2)+($top_button_bar_column_width*3))
					set_control_par(get_ui_id($panner_panel_visibility),$CONTROL_PAR_POS_Y,0)
					set_control_par(get_ui_id($panner_panel_visibility),$CONTROL_PAR_WIDTH,$top_button_bar_default_btn_width)
					set_control_par(get_ui_id($panner_panel_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($panner_panel_visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($top_navigation_ui_panel))
					make_persistent($panner_panel_visibility)
					read_persistent_var($panner_panel_visibility)
					select($panner_panel_visibility)
						case 0
							set_text($panner_panel_visibility,"[ panner ]")
							set_control_par(get_ui_id($panel__pan_settings), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_text($panner_panel_visibility,"[ p a n n e r ]")
							set_control_par(get_ui_id($panel__pan_settings), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
					end select




			declare const $top_busses_submenu_button_bar_width := 180
			declare const $top_busses_submenu_button_bar_spacing := 2
			declare const $top_busses_submenu_button_bar_posx := 128
			declare const $top_busses_submenu_button_bar_left_margin := 80
			declare const $top_busses_submenu_button_bar_top_margin := 20
			declare const $top_busses_submenu_button_bar_number_of_btns := 3
			declare const $top_busses_submenu_button_bar_default_btn_width := ( $top_busses_submenu_button_bar_width  - (($top_busses_submenu_button_bar_number_of_btns-1) * $top_busses_submenu_button_bar_spacing)) / $top_busses_submenu_button_bar_number_of_btns
			declare $top_busses_submenu_button_bar_column_width
				$top_busses_submenu_button_bar_column_width := $top_busses_submenu_button_bar_default_btn_width + $top_busses_submenu_button_bar_spacing
			declare const $top_busses_submenu_sub_button_bar_line_spacing := 20


			declare ui_label $label_bus_fx_preset_bar(1,1)
				set_control_par(get_ui_id($label_bus_fx_preset_bar),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_effect_controls))
				set_control_par(get_ui_id($label_bus_fx_preset_bar),$CONTROL_PAR_WIDTH,$top_busses_submenu_button_bar_left_margin-$top_busses_submenu_button_bar_spacing)
				set_control_par(get_ui_id ($label_bus_fx_preset_bar),$CONTROL_PAR_POS_X, $top_busses_submenu_button_bar_posx)
				set_control_par(get_ui_id ($label_bus_fx_preset_bar),$CONTROL_PAR_POS_Y, $top_busses_submenu_button_bar_top_margin)
				set_control_par_str(get_ui_id ($label_bus_fx_preset_bar),$CONTROL_PAR_TEXT, "f x  p r e s e t :")
				set_control_par_str(get_ui_id ($label_bus_fx_preset_bar),$CONTROL_PAR_HELP, "Changes the fx chain on the Bus 1.")

			declare ui_button $bus_clean_controls_panel_preset
					$bus_clean_controls_panel_preset := 1
					set_text($bus_clean_controls_panel_preset,"[ clean ]")
					set_control_par(get_ui_id($bus_clean_controls_panel_preset),$CONTROL_PAR_POS_X, $top_busses_submenu_button_bar_posx + $top_busses_submenu_button_bar_left_margin+($top_busses_submenu_button_bar_column_width*0))
					set_control_par(get_ui_id($bus_clean_controls_panel_preset),$CONTROL_PAR_POS_Y,$top_busses_submenu_button_bar_top_margin)
					set_control_par(get_ui_id($bus_clean_controls_panel_preset),$CONTROL_PAR_WIDTH,$top_busses_submenu_button_bar_default_btn_width)
					set_control_par(get_ui_id($bus_clean_controls_panel_preset), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($bus_clean_controls_panel_preset),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_effect_controls))
					make_persistent($bus_clean_controls_panel_preset)
					read_persistent_var($bus_clean_controls_panel_preset)
					select($bus_clean_controls_panel_preset)
						case 0
							set_text($bus_clean_controls_panel_preset,"[ clean ]")
							set_control_par(get_ui_id($panel__bus_clean_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_text($bus_clean_controls_panel_preset,"[ c l e a n ]")
							set_control_par(get_ui_id($panel__bus_clean_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)

							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_SHAPER, -1, $busclean_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_SHAPE_TYPE, $NI_SHAPE_TYPE_CLASSIC, -1, $busclean_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $busclean_fx_slot_num__eq3band, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_EQ3BAND, -1, $busclean_fx_slot_num__eq3band, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_TRANS_MASTER, -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_SV_NOTCH4, -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_TAPE_SAT,  -1, $busclean_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_TP_WARMTH, 1000000*4/6,  -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000,  -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $busclean_fx_slot_num__hp_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_SV_HP4, -1, $busclean_fx_slot_num__hp_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_CUTOFF, 0, -1, 6, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)


							set_engine_par($ENGINE_PAR_STEREO_PAN, (1000000 * (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) ), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_SHAPE, 1000000 * (get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_TR_SMOOTH, $switch__busclean_transmaster_smooth_attack, -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_TR_SUSTAIN, (1000000 * (get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_MIN_VALUE)) ), -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_TR_ATTACK, (1000000 * (get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_MIN_VALUE)) ), -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_RESONANCE, 1000000 * (get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							
							select ($switch_busclean_filters__tape_lp)
								case 0
									set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/3,  -1, $busclean_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								case 1
									set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*1/3,  -1, $busclean_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							end select
							
							set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__hp_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
					end select

			declare ui_button $bus_distortion_controls_panel_preset
					$bus_distortion_controls_panel_preset := 0
					set_text($bus_distortion_controls_panel_preset,"[ drive ]")
					set_control_par(get_ui_id($bus_distortion_controls_panel_preset),$CONTROL_PAR_POS_X, $top_busses_submenu_button_bar_posx + $top_busses_submenu_button_bar_left_margin+($top_busses_submenu_button_bar_column_width*1))
					set_control_par(get_ui_id($bus_distortion_controls_panel_preset),$CONTROL_PAR_POS_Y,$top_busses_submenu_button_bar_top_margin)
					set_control_par(get_ui_id($bus_distortion_controls_panel_preset),$CONTROL_PAR_WIDTH,$top_busses_submenu_button_bar_default_btn_width)
					set_control_par(get_ui_id($bus_distortion_controls_panel_preset), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($bus_distortion_controls_panel_preset),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_effect_controls))
					make_persistent($bus_distortion_controls_panel_preset)
					read_persistent_var($bus_distortion_controls_panel_preset)
					select($bus_distortion_controls_panel_preset)
						case 0
							set_text($bus_distortion_controls_panel_preset,"[ drive ]")
							set_control_par(get_ui_id($panel__bus_drive_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_text($bus_distortion_controls_panel_preset,"[ d r i v e ]")
							set_control_par(get_ui_id($panel__bus_drive_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)



							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_SHAPER, -1, $busdrive_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_SHAPE_TYPE, $NI_SHAPE_TYPE_CLASSIC, -1, $busdrive_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_PHASER, -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_CAT, -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_CT_BALLS, 1000000*43/100, -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_CT_TONE, 1000000, -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_CT_MONO, 0, -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_CRYWAH, -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_CW_MONO, 0, -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_LOFI, -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_BITS, 1000000, -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_FREQUENCY, 1000000, -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_TAPE_SAT,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/10,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_TP_WARMTH, 1000000*6/6,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_STEREO_PAN, (1000000 * (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) ), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							
							set_engine_par($ENGINE_PAR_SHAPE, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_RESONANCE, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_CT_DISTORTION, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_CT_FILTER, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_EFFECT_BYPASS, ($switch_busdrive_filters__wahwah-1)*(-1), -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_CW_PEDAL, (1000000 * (get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_MIN_VALUE)) ), -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_FREQUENCY, 1000000-(1000000 * (get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_BITS, 1000000-(1000000 * (get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							select ($switch_busdrive_filters__tape_lp)
								case 0
									set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/3,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								case 1
									set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/10,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							end select

					end select

			declare ui_button $bus_synth_controls_panel_preset
					$bus_synth_controls_panel_preset := 0
					set_text($bus_synth_controls_panel_preset,"[ synth ]")
					set_control_par(get_ui_id($bus_synth_controls_panel_preset),$CONTROL_PAR_POS_X, $top_busses_submenu_button_bar_posx + $top_busses_submenu_button_bar_left_margin+($top_busses_submenu_button_bar_column_width*2))
					set_control_par(get_ui_id($bus_synth_controls_panel_preset),$CONTROL_PAR_POS_Y,$top_busses_submenu_button_bar_top_margin)
					set_control_par(get_ui_id($bus_synth_controls_panel_preset),$CONTROL_PAR_WIDTH,$top_busses_submenu_button_bar_default_btn_width)
					set_control_par(get_ui_id($bus_synth_controls_panel_preset), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					set_control_par(get_ui_id ($bus_synth_controls_panel_preset),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__bus_effect_controls))
					make_persistent($bus_synth_controls_panel_preset)
					read_persistent_var($bus_synth_controls_panel_preset)
					select($bus_synth_controls_panel_preset)
						case 0
							set_text($bus_synth_controls_panel_preset,"[ synth ]")
							set_control_par(get_ui_id($panel__bus_synth_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_text($bus_synth_controls_panel_preset,"[ s y n t h ]")
							set_control_par(get_ui_id($panel__bus_synth_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_LOFI, -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_BITS, 1000000, -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_FREQUENCY, 1000000, -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_SHAPER, -1, $bussynth_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_SHAPE_TYPE, $NI_SHAPE_TYPE_DRUMS, -1, $bussynth_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_PHASER, -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_REPLIKA, -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_RDL_LOWCUT, 1000000*47/100, -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_RDL_FLUTTER, 0, -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_DISTORTION, -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_DISTORTION_TYPE, $NI_DISTORTION_TYPE_TUBE,  -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, 1000000/3,  -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_CHORAL,  -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_CHORAL_MODE, $NI_CHORAL_MODE_DIMENSION,  -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_CHORAL_AMOUNT, 1000000*5/100, -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_CHORAL_VOICES, 1000000*14/20, -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
								set_engine_par($ENGINE_PAR_CHORAL_RATE, 1000000/2, -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_STEREO_PAN, (1000000 * (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) ), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	
							set_engine_par($ENGINE_PAR_FREQUENCY, 1000000-(1000000 * (get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_BITS, 1000000-((1000000*2/3) * (get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_SHAPE, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_RESONANCE, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							$calc_bussynth_karplusstrong_feedback_level := (get_control_par(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_MIN_VALUE))
							$calc_bussynth_karplusstrong_feedback_level := real_to_int( exp( log(1000000.0) * int_to_real($calc_bussynth_karplusstrong_feedback_level) / int_to_real($calc_bussynth_karplusstrong_feedback_level + 1)  ) )
							set_engine_par($ENGINE_PAR_RDL_FEEDBACK, $calc_bussynth_karplusstrong_feedback_level, -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							$bussynth_karplusstrong_frequency := real_to_int(~last_note_freq_hz * int_to_real(get_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_numerator), $CONTROL_PAR_VALUE)) / int_to_real(get_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_denominator), $CONTROL_PAR_VALUE)))
							set_engine_par($ENGINE_PAR_RDL_TIME, (1000000 / 2) / $bussynth_karplusstrong_frequency, -1, $insertfx_slot_num__replika_karplus_strong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_SEND_EFFECT_DRY_LEVEL, (1000000 * (get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_MIN_VALUE)) ), -1, $bussynth_fx_slot_num__karplusstrong, $NI_INSERT_BUS)

							set_engine_par($ENGINE_PAR_DRIVE, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	
							set_engine_par($ENGINE_PAR_DAMPING, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_EFFECT_BYPASS, ($switch_bussynth_choral-1)*(-1), -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_CHORAL_DELAY, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_CHORAL_FEEDBACK, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_CHORAL_INVERT_PHASE, $switch_bussynth_choral__inv_phase, -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

							set_engine_par($ENGINE_PAR_STEREO, ($knob_bussynth_karplusstrong__stereo_preemphasis - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)+ 1) * 990000 / (get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
							set_engine_par($ENGINE_PAR_STEREO, 1000000 - (($knob_bussynth_karplusstrong__stereo_preemphasis - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE) + 1) * 990000 / (get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE))), -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)

					end select
	end if

	{
	message("panner is connected: " & $surround_panner_is_connected & "  " & $surround_panner_group & "  " &  $surround_panner_nibustype & "  " &  $surround_panner_nibustype)
	}




end on




function onuicontrol__slider_ahdsr_atk_curve()
	$calc_slider_ahdsr_atk_curve := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_atk_curve),$CONTROL_PAR_MIN_VALUE)) )
	$iter := 0
	while ($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_ATK_CURVE, $calc_slider_ahdsr_atk_curve, $iter, find_mod($iter, "ENV_AHDSR"), -1)
		inc($iter)
	end while
end function

on ui_control ($slider_ahdsr_atk_curve)
	call onuicontrol__slider_ahdsr_atk_curve
end on

function onuicontrol__slider_ahdsr_attack()
	$calc_slider_ahdsr_attack := 1000000 - (1000000 * (get_control_par(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_attack),$CONTROL_PAR_MIN_VALUE)) )
	$iter := 0
	while ($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_ATTACK, $calc_slider_ahdsr_attack, $iter, find_mod($iter, "ENV_AHDSR"), -1)
		inc($iter)
	end while
end function

on ui_control ($slider_ahdsr_attack)
	call onuicontrol__slider_ahdsr_attack
end on

function onuicontrol__slider_ahdsr_hold()
	$calc_slider_ahdsr_hold := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_hold),$CONTROL_PAR_MIN_VALUE)) )
	$iter := 0
	while ($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_HOLD, $calc_slider_ahdsr_hold, $iter, find_mod($iter, "ENV_AHDSR"), -1)
		inc($iter)
	end while
end function

on ui_control ($slider_ahdsr_hold)
	call onuicontrol__slider_ahdsr_hold
end on

function onuicontrol__slider_ahdsr_decay()
	$calc_slider_ahdsr_decay := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_decay),$CONTROL_PAR_MIN_VALUE)) )
	$iter := 0
	while ($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_DECAY, $calc_slider_ahdsr_decay, $iter, find_mod($iter, "ENV_AHDSR"), -1)
		inc($iter)
	end while
end function

on ui_control ($slider_ahdsr_decay)
	call onuicontrol__slider_ahdsr_decay
end on

function onuicontrol__slider_ahdsr_sustain()
	$calc_slider_ahdsr_sustain := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_sustain),$CONTROL_PAR_MIN_VALUE)) )
	$iter := 0
	while ($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_SUSTAIN, $calc_slider_ahdsr_sustain, $iter, find_mod($iter, "ENV_AHDSR"), -1)
		inc($iter)
	end while
end function

on ui_control ($slider_ahdsr_sustain)
	call onuicontrol__slider_ahdsr_sustain
end on

function onuicontrol__slider_ahdsr_release()
	$calc_slider_ahdsr_release := (1000000 * (get_control_par(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_ahdsr_release),$CONTROL_PAR_MIN_VALUE)) )
	$iter := 0
	while ($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_RELEASE, $calc_slider_ahdsr_release, $iter, find_mod($iter, "ENV_AHDSR"), -1)
		inc($iter)
	end while
end function
on ui_control ($slider_ahdsr_release)
	call onuicontrol__slider_ahdsr_release
end on



function onuicontrol__knob_filter_lp()
	set_engine_par($ENGINE_PAR_CUTOFF, 1000000-(1000000 * (get_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_filter_lp),$CONTROL_PAR_MIN_VALUE))), -1, $mainfx_slot_num__sv_lp2, $NI_MAIN_BUS)
end function
on ui_control($knob_filter_lp)
	call onuicontrol__knob_filter_lp
end on

function onuicontrol__knob_filter_hp()
	set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_filter_hp),$CONTROL_PAR_MIN_VALUE)), -1, $mainfx_slot_num__sv_hp2, $NI_MAIN_BUS)
end function
on ui_control($knob_filter_hp)
	call onuicontrol__knob_filter_hp
end on


{
function onuicontrol__switch_glide_pitch_mode()
	select ($switch_glide_pitch_mode)
		case 0
			set_control_par_str(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_TEXT, "[ speed ]")
		case 1
			set_control_par_str(get_ui_id ($switch_glide_pitch_mode),$CONTROL_PAR_TEXT, "[ time ]")
	end select
	$iter := 0
	while ($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_GLIDE_COEF_UNIT, $switch_glide_pitch_mode, $iter, find_mod($iter, "GLIDE"), -1)
		inc($iter)
	end while
		set_engine_par($ENGINE_PAR_GLIDE_COEF_UNIT, 1000, $iter, find_mod($iter, "GLIDE"), -1)
end function
on ui_control($switch_glide_pitch_mode)
	call onuicontrol__switch_glide_pitch_mode
end on
}
function onuicontrol__slider_glide_pitch_value()
	$calc_slider_glide_pitch_value := (1000000 * (get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider_glide_pitch_value),$CONTROL_PAR_MIN_VALUE)) )
	$iter := 0
	while ($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_GLIDE_COEF, $calc_slider_glide_pitch_value, $iter, find_mod($iter, "GLIDE"), -1)
		inc($iter)
	end while
end function
on ui_control($slider_glide_pitch_value)
	call onuicontrol__slider_glide_pitch_value
end on


function onuicontrol__switch_glide_legato_only()
	select($switch_glide_legato_only)
		case 1
			set_control_par_str(get_ui_id ($switch_glide_legato_only),$CONTROL_PAR_TEXT, "[ ON ]")
		case 0
			set_control_par_str(get_ui_id ($switch_glide_legato_only),$CONTROL_PAR_TEXT, "[ off ]")
	end select
end function
on ui_control($switch_glide_legato_only)
	call onuicontrol__switch_glide_legato_only
end on	



on ui_control ($drop_area)
    if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DRAG)
        message("DRAG")
        message("MOUSE OVER CONTROL: " & $NI_MOUSE_OVER_CONTROL)
    end if

    if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DROP)
        if (num_elements(!NI_DND_ITEMS_AUDIO) = 1)
        	if ($NUM_GROUPS = 1)
				wait_async(purge_group(0, 0))
			end if
			{wait_async(purge_group($current_dnd_group, 0))}
			wait_async(set_zone_par(%NI_USER_ZONE_IDS[$dnd_sample_count], $ZONE_PAR_GROUP, $current_dnd_group))
            wait_async(set_sample(%NI_USER_ZONE_IDS[$dnd_sample_count], !NI_DND_ITEMS_AUDIO[0]))
		    wait_async(set_zone_par(%NI_USER_ZONE_IDS[$dnd_sample_count],$ZONE_PAR_LOW_KEY,21))
			wait_async(set_zone_par(%NI_USER_ZONE_IDS[$dnd_sample_count],$ZONE_PAR_HIGH_KEY,108))
			wait_async(set_zone_par(%NI_USER_ZONE_IDS[$dnd_sample_count],$ZONE_PAR_LOW_VELO,1))
			wait_async(set_zone_par(%NI_USER_ZONE_IDS[$dnd_sample_count],$ZONE_PAR_HIGH_VELO,127))
			if($switch__dnd_automatic_root_setting=1)
		        wait_async(detect_pitch(%NI_USER_ZONE_IDS[$dnd_sample_count],~automatic_pitch_detection_result))
		        if (~automatic_pitch_detection_result # ~NI_DETECT_PITCH_INVALID)
		       		wait_async(set_zone_par(%NI_USER_ZONE_IDS[$dnd_sample_count],$ZONE_PAR_ROOT_KEY,real_to_int(round(~automatic_pitch_detection_result))))
		        end if
		    else
		        {Set the root note to the root slider value}
		        wait_async(set_zone_par(%NI_USER_ZONE_IDS[$dnd_sample_count],$ZONE_PAR_ROOT_KEY,60))
		    end if
		    set_loop_par(%NI_USER_ZONE_IDS[$dnd_sample_count],0,$LOOP_PAR_MODE, $switch__loop_not_oneshot)
        end if

		set_control_par(get_ui_id ($knob__allowed_group_with_lowest_idx),$CONTROL_PAR_VALUE, $current_dnd_group)
		set_control_par(get_ui_id ($knob__num_of_allowed_groups),$CONTROL_PAR_VALUE, 1)


  		attach_zone($Waveform, %NI_USER_ZONE_IDS[$dnd_sample_count], $UI_WAVEFORM_TABLE_IS_BIPOLAR)

        {todo: after dropping a sample and creating a new group, change the group knob to that new group}
        inc($dnd_sample_count)
        if($dnd_sample_count >= $num_of_user_zones)
        	$dnd_sample_count := 0
        end if
        inc($current_dnd_group)
        if($current_dnd_group >= $NUM_GROUPS)
        	$current_dnd_group := $user_zone_groups_offset
        end if
    end if
end on



function onuicontrol__knob__panner_lr_input_stage()
	set_engine_par($ENGINE_PAR_STEREO_PAN, (1000000 * (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) ), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob__panner_lr_input_stage)
	call onuicontrol__knob__panner_lr_input_stage
end on


function onuicontrol__switch__panner_module()
	if ($surround_panner_is_connected = 0)
		$switch__panner_module := 0
	end if
	select($switch__panner_module)
		case 1
			set_control_par_str(get_ui_id ($switch__panner_module),$CONTROL_PAR_TEXT, "[ ON ]")
		case 0
			set_control_par_str(get_ui_id ($switch__panner_module),$CONTROL_PAR_TEXT, "[ off ]")
	end select
	if ($surround_panner_is_connected # 0)
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS, ($switch__panner_module-1)*(-1), $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
	end if
		set_engine_par($ENGINE_PAR_EFFECT_BYPASS, ($switch__panner_module-1)*(-1), -1, $surround_panner_slot, $NI_MAIN_BUS)
end function
on ui_control($switch__panner_module)
	call onuicontrol__switch__panner_module
end on


function recalculate_panner_directional_focus()
	$calc_panner_directional_focus := (1000000 * (get_control_par(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_directional_focus),$CONTROL_PAR_MIN_VALUE)) )
	if ($surround_panner_is_connected # 0)
		set_engine_par($ENGINE_PAR_SP_DIVERGENCE, $calc_panner_directional_focus  , $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
	end if
end function
function onuicontrol__slider__panner_directional_focus()
	call recalculate_panner_directional_focus
end function
on ui_control($slider__panner_directional_focus)
	call onuicontrol__slider__panner_directional_focus
end on
function recalculate_panner_distance()
	$calc_panner_distance := (1000000 * (get_control_par(get_ui_id($slider__panner_distance),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_distance),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_distance),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_distance),$CONTROL_PAR_MIN_VALUE)) )
	if ($surround_panner_is_connected # 0)
		set_engine_par($ENGINE_PAR_SP_OFFSET_DISTANCE, $calc_panner_distance, $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
	end if
end function
function onuicontrol__slider__panner_distance()
	call recalculate_panner_distance
end function
on ui_control($slider__panner_distance)
	call onuicontrol__slider__panner_distance
end on

function recalculate_panner_azimuth()
	$calc_panner_azimuth := (500000 * (get_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_MIN_VALUE)) ) + (500000 * (get_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_MIN_VALUE)) )
	select($switch__pan_object)
		case 1
			$calc_panner_azimuth := $calc_panner_azimuth
		case 0
			$calc_panner_azimuth := 1000000-$calc_panner_azimuth
	end select
	if ($surround_panner_is_connected # 0)
		set_engine_par($ENGINE_PAR_SP_OFFSET_AZIMUTH, $calc_panner_azimuth, $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
	end if
end function
function onuicontrol__slider__panner_azimuth_right()
	call recalculate_panner_azimuth
end function
function onuicontrol__slider__panner_azimuth_left()
	call recalculate_panner_azimuth
end function
on ui_control($slider__panner_azimuth_right)
	call onuicontrol__slider__panner_azimuth_right
end on
on ui_control($slider__panner_azimuth_left)
	call onuicontrol__slider__panner_azimuth_left
end on

function recalculate_panner_xshift()
	$calc_panner_xshift_car := (500000 * (get_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_MIN_VALUE)) ) + (500000 * (get_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_MIN_VALUE)) )
	select($switch__pan_object)
		case 1
			$calc_panner_xshift_car := $calc_panner_xshift_car
		case 0
			$calc_panner_xshift_car := 1000000-$calc_panner_xshift_car
	end select
	if ($surround_panner_is_connected # 0)
		set_engine_par($ENGINE_PAR_SP_OFFSET_X, $calc_panner_xshift_car, $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
	end if
end function
function onuicontrol__slider__panner_xshift_car_right()
	call recalculate_panner_xshift
end function
function onuicontrol__slider__panner_xshift_car_left()
	call recalculate_panner_xshift
end function
on ui_control($slider__panner_xshift_car_right)
	call onuicontrol__slider__panner_xshift_car_right
end on
on ui_control($slider__panner_xshift_car_left)
	call onuicontrol__slider__panner_xshift_car_left
end on


function recalculate_panner_yshift()
	$calc_knob__panner_yshift := (1000000 * (get_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_MIN_VALUE)) ) - (1000000 * (get_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_MIN_VALUE)) )
	select($switch__pan_object)
		case 1
			{$calc_knob__panner_yshift := 1000000-$calc_knob__panner_yshift}
			$calc_knob__panner_yshift := $calc_knob__panner_yshift {forward & backward is set to be the same for listener and source panning}
		case 0
			$calc_knob__panner_yshift := $calc_knob__panner_yshift
	end select
	if ($surround_panner_is_connected # 0)
		set_engine_par($ENGINE_PAR_SP_OFFSET_Y, $calc_knob__panner_yshift, $surround_panner_group, $surround_panner_slot, $surround_panner_nibustype)
	end if
end function
function onuicontrol__slider__panner_yshift_forward()
	call recalculate_panner_yshift
end function
function onuicontrol__slider__panner_yshift_backward()
	call recalculate_panner_yshift
end function
on ui_control($slider__panner_yshift_forward)
	call onuicontrol__slider__panner_yshift_forward
end on
on ui_control($slider__panner_yshift_backward)
	call onuicontrol__slider__panner_yshift_backward
end on

function recalculate_panning()
	call recalculate_panner_xshift
	call recalculate_panner_yshift
	call recalculate_panner_azimuth
	call recalculate_panner_directional_focus
	call recalculate_panner_distance
end function
function onuicontrol__switch__pan_object()
	select($switch__pan_object)
		case 1
			set_control_par_str(get_ui_id ($switch__pan_object),$CONTROL_PAR_TEXT, "[ source ]")
		case 0
			set_control_par_str(get_ui_id ($switch__pan_object),$CONTROL_PAR_TEXT, "[ listener ]")
	end select

	if(1=0)
		set_control_par(get_ui_id($slider__panner_yshift_forward), $CONTROL_PAR_VALUE, get_control_par(get_ui_id($slider__panner_yshift_forward),$CONTROL_PAR_MAX_VALUE) - $slider__panner_yshift_forward)
		set_control_par(get_ui_id($slider__panner_yshift_backward), $CONTROL_PAR_VALUE, get_control_par(get_ui_id($slider__panner_yshift_backward),$CONTROL_PAR_MAX_VALUE) - $slider__panner_yshift_backward)
	end if

	set_control_par(get_ui_id($slider__panner_xshift_car_right), $CONTROL_PAR_VALUE, get_control_par(get_ui_id($slider__panner_xshift_car_right),$CONTROL_PAR_MAX_VALUE) - $slider__panner_xshift_car_right)
	set_control_par(get_ui_id($slider__panner_xshift_car_left), $CONTROL_PAR_VALUE, get_control_par(get_ui_id($slider__panner_xshift_car_left),$CONTROL_PAR_MAX_VALUE) - $slider__panner_xshift_car_left)
	set_control_par(get_ui_id($slider__panner_azimuth_right), $CONTROL_PAR_VALUE, get_control_par(get_ui_id($slider__panner_azimuth_right),$CONTROL_PAR_MAX_VALUE) - $slider__panner_azimuth_right)
	set_control_par(get_ui_id($slider__panner_azimuth_left), $CONTROL_PAR_VALUE, get_control_par(get_ui_id($slider__panner_azimuth_left),$CONTROL_PAR_MAX_VALUE) - $slider__panner_azimuth_left)

	call recalculate_panner_xshift
	call recalculate_panner_yshift
	call recalculate_panner_azimuth
	call recalculate_panner_directional_focus
	call recalculate_panner_distance
end function
on ui_control($switch__pan_object)
	call onuicontrol__switch__pan_object
end on



on ui_control($knob__release_group)
	if(get_control_par(get_ui_id ($knob__release_group),$CONTROL_PAR_VALUE) = -1)
		set_knob_label($knob__release_group, "   " & "none")
	else
		set_knob_label($knob__release_group, "    " & get_control_par(get_ui_id ($knob__release_group),$CONTROL_PAR_VALUE))
	end if
end on



function onuicontrol__knob_busclean_image__stereo_preemphasis()
	set_engine_par($ENGINE_PAR_STEREO, ($knob_busclean_image__stereo_preemphasis - get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)+ 1) * 990000 / (get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	set_engine_par($ENGINE_PAR_STEREO, 1000000 - (($knob_busclean_image__stereo_preemphasis - get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE) + 1) * 990000 / (get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE))), -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busclean_image__stereo_preemphasis)
	call onuicontrol__knob_busclean_image__stereo_preemphasis
end on
function onuicontrol__knob_busdrive_filters__stereo_preemphasis()
	set_engine_par($ENGINE_PAR_STEREO, ($knob_busdrive_filters__stereo_preemphasis - get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)+ 1) * 990000 / (get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	set_engine_par($ENGINE_PAR_STEREO, 1000000 - (($knob_busdrive_filters__stereo_preemphasis - get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE) + 1) * 990000 / (get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_filters__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE))), -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busdrive_filters__stereo_preemphasis)
	call onuicontrol__knob_busdrive_filters__stereo_preemphasis
end on
function onuicontrol__knob_bussynth_karplusstrong__stereo_preemphasis()
	set_engine_par($ENGINE_PAR_STEREO, ($knob_bussynth_karplusstrong__stereo_preemphasis - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)+ 1) * 990000 / (get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	set_engine_par($ENGINE_PAR_STEREO, 1000000 - (($knob_bussynth_karplusstrong__stereo_preemphasis - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE) + 1) * 990000 / (get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE))), -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_karplusstrong__stereo_preemphasis)
	call onuicontrol__knob_bussynth_karplusstrong__stereo_preemphasis
end on


function show_sample_panel()
	$sample_control_panel_visibility := 1
	set_text($sample_control_panel_visibility,"[ s a m p l e r ]")
	set_control_par(get_ui_id($panel__sample_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function hide_sample_panel()
	$sample_control_panel_visibility := 0
	set_text($sample_control_panel_visibility,"[ sampler ]")
	set_control_par(get_ui_id($panel__sample_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
end function

function show_busfx_panel()
	$bus_effects_panel_visibility := 1
	set_text($bus_effects_panel_visibility,"[ b u s  f x ]")
	set_control_par(get_ui_id($panel__bus_effect_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function hide_busfx_panel()
	$bus_effects_panel_visibility := 0
	set_text($bus_effects_panel_visibility,"[ bus fx ]")
	set_control_par(get_ui_id($panel__bus_effect_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
end function
function show_sendfx_panel()
	$send_effects_panel_visibility := 1
	set_text($send_effects_panel_visibility,"[ a u x  f x ]")
	set_control_par(get_ui_id($panel__send_effects_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function hide_sendfx_panel()
	$send_effects_panel_visibility := 0
	set_text($send_effects_panel_visibility,"[ aux fx ]")
	set_control_par(get_ui_id($panel__send_effects_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
end function
function show_panner_panel()
	$panner_panel_visibility := 1
	set_text($panner_panel_visibility,"[ p a n n e r ]")
	set_control_par(get_ui_id($panel__pan_settings), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function hide_panner_panel()
	$panner_panel_visibility := 0
	set_text($panner_panel_visibility,"[ panner ]")
	set_control_par(get_ui_id($panel__pan_settings), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
end function
function onuicontrol__sample_control_panel_visibility()
	call hide_busfx_panel
	call hide_sendfx_panel
	call hide_panner_panel
	call show_sample_panel
end function
on ui_control($sample_control_panel_visibility)
	call onuicontrol__sample_control_panel_visibility
end on
function onuicontrol__bus_effects_panel_visibility()
	call hide_sendfx_panel
	call hide_sample_panel
	call hide_panner_panel
	call show_busfx_panel
end function
on ui_control($bus_effects_panel_visibility)
	call onuicontrol__bus_effects_panel_visibility
end on
function onuicontrol__send_effects_panel_visibility()
	call hide_busfx_panel
	call hide_sample_panel
	call hide_panner_panel
	call show_sendfx_panel
end function
on ui_control($send_effects_panel_visibility)
	call onuicontrol__send_effects_panel_visibility
end on
function onuicontrol__panner_panel_visibility()
	call hide_busfx_panel
	call hide_sample_panel
	call hide_sendfx_panel
	call show_panner_panel
end function
on ui_control($panner_panel_visibility)
	call onuicontrol__panner_panel_visibility
end on


function load_bus_clean_channel_fx()
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_SHAPER, -1, $busclean_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_SHAPE_TYPE, $NI_SHAPE_TYPE_CLASSIC, -1, $busclean_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $busclean_fx_slot_num__eq3band, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_EQ3BAND, -1, $busclean_fx_slot_num__eq3band, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_TRANS_MASTER, -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_SV_NOTCH4, -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_TAPE_SAT,  -1, $busclean_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_TP_WARMTH, 1000000*4/6,  -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000,  -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $busclean_fx_slot_num__hp_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_SV_HP4, -1, $busclean_fx_slot_num__hp_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_CUTOFF, 0, -1, $busclean_fx_slot_num__hp_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))



	wait_async(set_engine_par($ENGINE_PAR_STEREO_PAN, (1000000 * (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) ), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_SHAPE, 1000000 * (get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_TR_SMOOTH, $switch__busclean_transmaster_smooth_attack, -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_TR_SUSTAIN, (1000000 * (get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_MIN_VALUE)) ), -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_TR_ATTACK, (1000000 * (get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_MIN_VALUE)) ), -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_RESONANCE, 1000000 * (get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	select ($switch_busclean_filters__tape_lp)
		case 0
			wait_async(set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/3,  -1, $busclean_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		case 1
			wait_async(set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*1/3,  -1, $busclean_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	end select

	wait_async(set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__hp_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
end function

function load_bus_drive_channel_fx()
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_SHAPER, -1, $busdrive_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_SHAPE_TYPE, $NI_SHAPE_TYPE_CLASSIC, -1, $busdrive_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_PHASER, -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_CAT, -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_CT_BALLS, 1000000*43/100, -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_CT_TONE, 1000000, -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_CT_MONO, 0, -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_CRYWAH, -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_CW_MONO, 0, -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_LOFI, -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_BITS, 1000000, -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_FREQUENCY, 1000000, -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_TAPE_SAT,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/10,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_TP_WARMTH, 1000000*6/6,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))


	wait_async(set_engine_par($ENGINE_PAR_STEREO_PAN, (1000000 * (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) ), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_SHAPE, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_RESONANCE, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_CT_DISTORTION, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_CT_FILTER, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_EFFECT_BYPASS, ($switch_busdrive_filters__wahwah-1)*(-1), -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_CW_PEDAL, (1000000 * (get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_MIN_VALUE)) ), -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_FREQUENCY, 1000000-(1000000 * (get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_BITS, 1000000-((1000000*2/3) * (get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	select ($switch_busdrive_filters__tape_lp)
		case 0
			wait_async(set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/3,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		case 1
			wait_async(set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/10,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	end select

end function

function load_bus_synth_channel_fx()
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_LOFI, -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_BITS, 1000000, -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_FREQUENCY, 1000000, -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_SHAPER, -1, $bussynth_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_SHAPE_TYPE, $NI_SHAPE_TYPE_DRUMS, -1, $bussynth_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_EFFECT_SUBTYPE, $FILTER_TYPE_PHASER, -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_REPLIKA, -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_RDL_LOWCUT, 1000000*47/100, -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_RDL_FLUTTER, 0, -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_DISTORTION, -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_DISTORTION_TYPE, $NI_DISTORTION_TYPE_TUBE,  -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, 1000000/3,  -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_CHORAL,  -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_CHORAL_MODE, $NI_CHORAL_MODE_DIMENSION,  -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_CHORAL_AMOUNT, 1000000*5/100, -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_CHORAL_VOICES, 1000000*14/20, -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
		wait_async(set_engine_par($ENGINE_PAR_CHORAL_RATE, 1000000/2, -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_STEREO, -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_STEREO_PAN, (1000000 * (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob__panner_lr_input_stage),$CONTROL_PAR_MIN_VALUE)) ), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_FREQUENCY, 1000000-(1000000 * (get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_BITS, 1000000-((1000000*2/3) * (get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_SHAPE, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_RESONANCE, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	$calc_bussynth_karplusstrong_feedback_level := (get_control_par(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_MIN_VALUE))
	$calc_bussynth_karplusstrong_feedback_level := real_to_int( exp( log(1000000.0) * int_to_real($calc_bussynth_karplusstrong_feedback_level) / int_to_real($calc_bussynth_karplusstrong_feedback_level + 1)  ) )
	wait_async(set_engine_par($ENGINE_PAR_RDL_FEEDBACK, $calc_bussynth_karplusstrong_feedback_level, -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	$bussynth_karplusstrong_frequency := real_to_int(~last_note_freq_hz * int_to_real(get_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_numerator), $CONTROL_PAR_VALUE)) / int_to_real(get_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_denominator), $CONTROL_PAR_VALUE)))
	wait_async(set_engine_par($ENGINE_PAR_RDL_TIME, (1000000 / 2) / $bussynth_karplusstrong_frequency, -1, $insertfx_slot_num__replika_karplus_strong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_SEND_EFFECT_DRY_LEVEL, (1000000 * (get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_MIN_VALUE)) ), -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_DRIVE, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	
	wait_async(set_engine_par($ENGINE_PAR_DAMPING, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_EFFECT_BYPASS, ($switch_bussynth_choral-1)*(-1), -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_CHORAL_DELAY, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_CHORAL_FEEDBACK, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_CHORAL_INVERT_PHASE, $switch_bussynth_choral__inv_phase, -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

	wait_async(set_engine_par($ENGINE_PAR_STEREO, ($knob_bussynth_karplusstrong__stereo_preemphasis - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)+ 1) * 990000 / (get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE)), -1, $bus_fx_slot_num__stereo_preemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
	wait_async(set_engine_par($ENGINE_PAR_STEREO, 1000000 - (($knob_bussynth_karplusstrong__stereo_preemphasis - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE) + 1) * 990000 / (get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_karplusstrong__stereo_preemphasis),$CONTROL_PAR_MIN_VALUE))), -1, $bus_fx_slot_num__stereo_deemphasis, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))

end function

function onuicontrol__knob_busclean_filters__hp()
	set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__hp),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__hp_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busclean_filters__hp)
	call onuicontrol__knob_busclean_filters__hp
end on
function onuicontrol__knob_busclean_filters__notch_cutoff()
	set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_cutoff),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busclean_filters__notch_cutoff)
	call onuicontrol__knob_busclean_filters__notch_cutoff
end on
function onuicontrol__knob_busclean_filters__notch_reso()
	set_engine_par($ENGINE_PAR_RESONANCE, 1000000 * (get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_filters__notch_reso),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__notch_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busclean_filters__notch_reso)
	call onuicontrol__knob_busclean_filters__notch_reso
end on
function onuicontrol__switch_busclean_filters__tape_lp()
	select ($switch_busclean_filters__tape_lp)
		case 0
			set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/3,  -1, $busclean_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
		case 1
			set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*1/3,  -1, $busclean_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	end select
end function
on ui_control($switch_busclean_filters__tape_lp)
	call onuicontrol__switch_busclean_filters__tape_lp
end on
function onuicontrol__knob_busclean_image__saturation()
	set_engine_par($ENGINE_PAR_SHAPE, 1000000 * (get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busclean_image__saturation),$CONTROL_PAR_MIN_VALUE)), -1, $busclean_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busclean_image__saturation)
	call onuicontrol__knob_busclean_image__saturation
end on
function onuicontrol__switch__busclean_transmaster_smooth_attack()
	set_engine_par($ENGINE_PAR_TR_SMOOTH, $switch__busclean_transmaster_smooth_attack, -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($switch__busclean_transmaster_smooth_attack)
	call onuicontrol__switch__busclean_transmaster_smooth_attack
end on
function onuicontrol__knob_busclean_image__transient_strength()
	set_engine_par($ENGINE_PAR_TR_ATTACK, (1000000 * (get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busclean_image__transient_strength),$CONTROL_PAR_MIN_VALUE)) ), -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busclean_image__transient_strength)
	call onuicontrol__knob_busclean_image__transient_strength
end on
function onuicontrol__knob_busclean_image__sustain_loudness()
	set_engine_par($ENGINE_PAR_TR_SUSTAIN, (1000000 * (get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busclean_image__sustain_loudness),$CONTROL_PAR_MIN_VALUE)) ), -1, $busclean_fx_slot_num__transient_master, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busclean_image__sustain_loudness)
	call onuicontrol__knob_busclean_image__sustain_loudness
end on

function show_bus_clean_controls_panel()
	$bus_clean_controls_panel_preset := 1
	set_text($bus_clean_controls_panel_preset,"[ c l e a n ]")
	set_control_par(get_ui_id($panel__bus_clean_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function hide_bus_clean_controls_panel()
	$bus_clean_controls_panel_preset := 0
	set_text($bus_clean_controls_panel_preset,"[ clean ]")
	set_control_par(get_ui_id($panel__bus_clean_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
end function
function show_bus_distortion_controls_panel()
	$bus_distortion_controls_panel_preset := 1
	set_text($bus_distortion_controls_panel_preset,"[ d r i v e ]")
	set_control_par(get_ui_id($panel__bus_drive_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function hide_bus_distortion_controls_panel()
	$bus_distortion_controls_panel_preset := 0
	set_text($bus_distortion_controls_panel_preset,"[ drive ]")
	set_control_par(get_ui_id($panel__bus_drive_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
end function
function show_bus_synth_controls_panel()
	$bus_synth_controls_panel_preset := 1
	set_text($bus_synth_controls_panel_preset,"[ s y n t h ]")
	set_control_par(get_ui_id($panel__bus_synth_controls), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function hide_bus_synth_controls_panel()
	$bus_synth_controls_panel_preset := 0
	set_text($bus_synth_controls_panel_preset,"[ synth ]")
	set_control_par(get_ui_id($panel__bus_synth_controls), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
end function
function route_all_groups_to_bus__clean()
	$iter := 0
	while($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_OUTPUT_CHANNEL, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx, $iter, -1, -1) 
		inc($iter)
	end while
end function
function route_all_groups_to_bus__drive()
	$iter := 0
	while($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_OUTPUT_CHANNEL, $NI_BUS_OFFSET + 1, $iter, -1, -1) 
		inc($iter)
	end while
end function
function route_all_groups_to_bus__synth()
	$iter := 0
	while($iter < $NUM_GROUPS)
		set_engine_par($ENGINE_PAR_OUTPUT_CHANNEL, $NI_BUS_OFFSET + 3, $iter, -1, -1) 
		inc($iter)
	end while
end function
function onuicontrol__bus_clean_controls_panel_preset()
	call hide_bus_distortion_controls_panel
	call hide_bus_synth_controls_panel
	call show_bus_clean_controls_panel
	call load_bus_clean_channel_fx
end function
on ui_control($bus_clean_controls_panel_preset)
	call onuicontrol__bus_clean_controls_panel_preset
end on
function onuicontrol__bus_distortion_controls_panel_preset()
	call hide_bus_clean_controls_panel
	call hide_bus_synth_controls_panel
	call show_bus_distortion_controls_panel
	call load_bus_drive_channel_fx
end function
on ui_control($bus_distortion_controls_panel_preset)
	call onuicontrol__bus_distortion_controls_panel_preset
end on
function onuicontrol__bus_synth_controls_panel_preset()
	call hide_bus_clean_controls_panel
	call hide_bus_distortion_controls_panel
	call show_bus_synth_controls_panel
	call load_bus_synth_channel_fx
end function
on ui_control($bus_synth_controls_panel_preset)
	call onuicontrol__bus_synth_controls_panel_preset
end on


function onuicontrol__knob_busdrive_distortion_settings__saturation()
	set_engine_par($ENGINE_PAR_SHAPE, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__saturation),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busdrive_distortion_settings__saturation)
	call onuicontrol__knob_busdrive_distortion_settings__saturation
end on
function onuicontrol__knob_busdrive_phase_filter__cutoff()
	set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busdrive_phase_filter__cutoff)
	call onuicontrol__knob_busdrive_phase_filter__cutoff
end on
function onuicontrol__knob_busdrive_phase_filter__reso()
	set_engine_par($ENGINE_PAR_RESONANCE, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busdrive_phase_filter__reso)
	call onuicontrol__knob_busdrive_phase_filter__reso
end on
function onuicontrol__knob_busdrive_distortion_settings__cat_distortion()
	set_engine_par($ENGINE_PAR_CT_DISTORTION, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_distortion),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busdrive_distortion_settings__cat_distortion)
	call onuicontrol__knob_busdrive_distortion_settings__cat_distortion
end on
function onuicontrol__knob_busdrive_distortion_settings__cat_filter()
	set_engine_par($ENGINE_PAR_CT_FILTER, 1000000 * (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_busdrive_distortion_settings__cat_filter),$CONTROL_PAR_MIN_VALUE)), -1, $busdrive_fx_slot_num__cat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busdrive_distortion_settings__cat_filter)
	call onuicontrol__knob_busdrive_distortion_settings__cat_filter
end on

function onuicontrol__switch_busdrive_filters__wahwah()
	set_engine_par($ENGINE_PAR_EFFECT_BYPASS, ($switch_busdrive_filters__wahwah-1)*(-1), -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($switch_busdrive_filters__wahwah)
	call onuicontrol__switch_busdrive_filters__wahwah
end on
function onuicontrol__knob_busdrive_filters__wahwah()
	set_engine_par($ENGINE_PAR_CW_PEDAL, (1000000 * (get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busdrive_filters__wahwah),$CONTROL_PAR_MIN_VALUE)) ), -1, $busdrive_fx_slot_num__wah, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busdrive_filters__wahwah)
	call onuicontrol__knob_busdrive_filters__wahwah
end on

function onuicontrol__knob_busdrive_bitcrusher__sample_rate_reduction()
	set_engine_par($ENGINE_PAR_FREQUENCY, 1000000-(1000000 * (get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busdrive_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busdrive_bitcrusher__sample_rate_reduction)
	call onuicontrol__knob_busdrive_bitcrusher__sample_rate_reduction
end on	
function onuicontrol__knob_busdrive_bitcrusher__bit_rate_reduction()
	set_engine_par($ENGINE_PAR_BITS, 1000000-((1000000*2/3) * (get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_busdrive_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $busdrive_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_busdrive_bitcrusher__bit_rate_reduction)
	call onuicontrol__knob_busdrive_bitcrusher__bit_rate_reduction
end on
function onuicontrol__switch_busdrive_filters__tape_lp()
	select ($switch_busdrive_filters__tape_lp)
		case 0
			set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/3,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
		case 1
			set_engine_par($ENGINE_PAR_TP_HF_ROLLOFF, 1000000*3/10,  -1, $busdrive_fx_slot_num__tape_sat, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	end select
end function
on ui_control($switch_busdrive_filters__tape_lp)
	call onuicontrol__switch_busdrive_filters__tape_lp
end on







function onuicontrol__knob_bussynth_bitcrusher__sample_rate_reduction()
	set_engine_par($ENGINE_PAR_FREQUENCY, 1000000-(1000000 * (get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_bussynth_bitcrusher__sample_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_bitcrusher__sample_rate_reduction)
	call onuicontrol__knob_bussynth_bitcrusher__sample_rate_reduction
end on	
function onuicontrol__knob_bussynth_bitcrusher__bit_rate_reduction()
	set_engine_par($ENGINE_PAR_BITS, 1000000-((1000000*2/3) * (get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_bussynth_bitcrusher__bit_rate_reduction),$CONTROL_PAR_MIN_VALUE)) ), -1, $bussynth_fx_slot_num__lofi, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_bitcrusher__bit_rate_reduction)
	call onuicontrol__knob_bussynth_bitcrusher__bit_rate_reduction
end on

function onuicontrol__knob_bussynth_input_gain_saturation()
	set_engine_par($ENGINE_PAR_SHAPE, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_input_gain_saturation),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__saturation, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_input_gain_saturation)
	call onuicontrol__knob_bussynth_input_gain_saturation
end on

function onuicontrol__knob_bussynth_phase_filter__cutoff()
			set_engine_par($ENGINE_PAR_CUTOFF, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__cutoff),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_phase_filter__cutoff)
	call onuicontrol__knob_bussynth_phase_filter__cutoff
end on
function onuicontrol__knob_bussynth_phase_filter__reso()
			set_engine_par($ENGINE_PAR_RESONANCE, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_phase_filter__reso),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__phase_filter, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_phase_filter__reso)
	call onuicontrol__knob_bussynth_phase_filter__reso
end on



function onuicontrol__knob_bussynth_karplusstrong__feedback()
	$calc_bussynth_karplusstrong_feedback_level := (get_control_par(get_ui_id($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_karplusstrong__feedback),$CONTROL_PAR_MIN_VALUE))
	$calc_bussynth_karplusstrong_feedback_level := real_to_int( exp( log(1000000.0) * int_to_real($calc_bussynth_karplusstrong_feedback_level) / int_to_real($calc_bussynth_karplusstrong_feedback_level + 1)  ) )
	wait_async(set_engine_par($ENGINE_PAR_RDL_FEEDBACK, $calc_bussynth_karplusstrong_feedback_level, -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
end function
on ui_control($knob_bussynth_karplusstrong__feedback)
	call onuicontrol__knob_bussynth_karplusstrong__feedback
end on

function change_bussynth_karplusstrong_frequency()
	$bussynth_karplusstrong_frequency := real_to_int(~last_note_freq_hz * int_to_real(get_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_numerator), $CONTROL_PAR_VALUE)) / int_to_real(get_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_denominator), $CONTROL_PAR_VALUE)))
	set_engine_par($ENGINE_PAR_RDL_TIME, (1000000 / 2) / $bussynth_karplusstrong_frequency, -1, $insertfx_slot_num__replika_karplus_strong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
function onuicontrol__knob_bussynth_karplusstrong__freq_numerator()
	call change_bussynth_karplusstrong_frequency
end function
on ui_control($knob_bussynth_karplusstrong__freq_numerator)
	call onuicontrol__knob_bussynth_karplusstrong__freq_numerator
end on
function onuicontrol__knob_bussynth_karplusstrong__freq_denominator()
	call change_bussynth_karplusstrong_frequency
end function
on ui_control($knob_bussynth_karplusstrong__freq_denominator)
	call onuicontrol__knob_bussynth_karplusstrong__freq_denominator
end on
function onuicontrol__knob_bussynth_karplusstrong__dry_signal_lvl()
	wait_async(set_engine_par($ENGINE_PAR_SEND_EFFECT_DRY_LEVEL, (1000000 * (get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_bussynth_karplusstrong__dry_signal_lvl),$CONTROL_PAR_MIN_VALUE)) ), -1, $bussynth_fx_slot_num__karplusstrong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx))
end function
on ui_control($knob_bussynth_karplusstrong__dry_signal_lvl)
	call onuicontrol__knob_bussynth_karplusstrong__dry_signal_lvl
end on
function onuicontrol__switch_bussynth_karplusstrong_latch_freq()
	select ($switch_bussynth_karplusstrong_latch_freq)
		case 0
			set_control_par_str(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_TEXT, "[ follow pitch ]")
			set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		case 1
			set_control_par_str(get_ui_id ($switch_bussynth_karplusstrong_latch_freq),$CONTROL_PAR_TEXT, "[ latch freq ]")
			set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_numerator),$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
			set_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_denominator),$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
	end select
end function
on ui_control($switch_bussynth_karplusstrong_latch_freq)
	call onuicontrol__switch_bussynth_karplusstrong_latch_freq
end on

function onuicontrol__knob_bussynth_distortion__amount()
	set_engine_par($ENGINE_PAR_DRIVE, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__amount),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_distortion__amount)
	call onuicontrol__knob_bussynth_distortion__amount
end on

function onuicontrol__knob_bussynth_distortion__damping()
	set_engine_par($ENGINE_PAR_DAMPING, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_distortion__damping),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__distortion, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_distortion__damping)
	call onuicontrol__knob_bussynth_distortion__damping
end on

function onuicontrol__switch_bussynth_choral()
	set_engine_par($ENGINE_PAR_EFFECT_BYPASS, ($switch_bussynth_choral-1)*(-1), -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($switch_bussynth_choral)
	call onuicontrol__switch_bussynth_choral
end on
function onuicontrol__knob_bussynth_choral__voice_delay()
	set_engine_par($ENGINE_PAR_CHORAL_DELAY, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__voice_delay),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_choral__voice_delay)
	call onuicontrol__knob_bussynth_choral__voice_delay
end on
function onuicontrol__knob_bussynth_choral__feedback()
	set_engine_par($ENGINE_PAR_CHORAL_FEEDBACK, 1000000 * (get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_MAX_VALUE) - get_control_par(get_ui_id ($knob_bussynth_choral__feedback),$CONTROL_PAR_MIN_VALUE)), -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($knob_bussynth_choral__feedback)
	call onuicontrol__knob_bussynth_choral__feedback
end on
function onuicontrol__switch_bussynth_choral__inv_phase()
	set_engine_par($ENGINE_PAR_CHORAL_INVERT_PHASE, $switch_bussynth_choral__inv_phase, -1, $bussynth_fx_slot_num__choral, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
end function
on ui_control($switch_bussynth_choral__inv_phase)
	call onuicontrol__switch_bussynth_choral__inv_phase
end on


function onuicontrol__knob__after_send_gain()
	set_engine_par($ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, (1000000 * (get_control_par(get_ui_id($knob__after_send_gain),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob__after_send_gain),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob__after_send_gain),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob__after_send_gain),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__gain, $NI_INSERT_BUS)
	set_engine_par($ENGINE_PAR_SEND_EFFECT_DRY_LEVEL, 0, -1, $insertfx_slot_num__gain, $NI_INSERT_BUS)
end function
on ui_control($knob__after_send_gain)
	call onuicontrol__knob__after_send_gain
end on

function onuicontrol__knob_reverb_send_level()
	set_engine_par(%ksp_sendlevel_par[$sendfx_slot_num__reverb], (1000000 * (get_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_reverb_send_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__send_levels, $NI_INSERT_BUS)
end function
on ui_control($knob_reverb_send_level)
	call onuicontrol__knob_reverb_send_level
end on

function onuicontrol__switch_delay_A_toggle()
	select ($switch_delay_A_toggle)
		case 0
			set_control_par_str(get_ui_id ($switch_delay_A_toggle),$CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(get_ui_id ($switch_delay_A_toggle),$CONTROL_PAR_TEXT, "[ ON ]")
	end select
	set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS, ($switch_delay_A_toggle-1)*(-1), -1, $sendfx_slot_num__replika_delay_A, $NI_SEND_BUS)
end function
on ui_control($switch_delay_A_toggle)
	call onuicontrol__switch_delay_A_toggle
end on
function onuicontrol__knob_delay_A_send_level()
	set_engine_par(%ksp_sendlevel_par[$sendfx_slot_num__replika_delay_A], (1000000 * (get_control_par(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_A_send_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__send_levels, $NI_INSERT_BUS)
end function
on ui_control($knob_delay_A_send_level)
	call onuicontrol__knob_delay_A_send_level
end on
function onuicontrol__knob_delay_A_feedback_level()
		set_engine_par($ENGINE_PAR_RDL_FEEDBACK, (1000000 * (get_control_par(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_A_feedback_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $sendfx_slot_num__replika_delay_A, $NI_SEND_BUS)
end function
on ui_control($knob_delay_A_feedback_level)
	call onuicontrol__knob_delay_A_feedback_level
end on
function change_delay_A_time()
		$sendfx_replika_delay_A_time := ($DURATION_QUARTER * $SIGNATURE_NUM * $SIGNATURE_DENOM / 4) * get_control_par(get_ui_id($knob_delay_A_time_numerator), $CONTROL_PAR_VALUE) / get_control_par(get_ui_id($knob_delay_A_time_denominator), $CONTROL_PAR_VALUE)
		set_engine_par($ENGINE_PAR_RDL_TIME, $sendfx_replika_delay_A_time / 2, -1, $sendfx_slot_num__replika_delay_A, $NI_SEND_BUS)
end function
function onuicontrol__knob_delay_A_time_numerator()
	call change_delay_A_time
end function
on ui_control ($knob_delay_A_time_numerator)
	call onuicontrol__knob_delay_A_time_numerator
end on
function onuicontrol__knob_delay_A_time_denominator()
	call change_delay_A_time
end function
on ui_control ($knob_delay_A_time_denominator)
	call onuicontrol__knob_delay_A_time_denominator
end on

function onuicontrol__switch_delay_B_toggle()
	select ($switch_delay_B_toggle)
		case 0
			set_control_par_str(get_ui_id ($switch_delay_B_toggle),$CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(get_ui_id ($switch_delay_B_toggle),$CONTROL_PAR_TEXT, "[ ON ]")
	end select
	set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS, ($switch_delay_B_toggle-1)*(-1), -1, $sendfx_slot_num__replika_delay_B, $NI_SEND_BUS)
end function
on ui_control($switch_delay_B_toggle)
	call onuicontrol__switch_delay_B_toggle
end on
function onuicontrol__knob_delay_B_send_level()
	set_engine_par(%ksp_sendlevel_par[$sendfx_slot_num__replika_delay_B], (1000000 * (get_control_par(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_B_send_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__send_levels, $NI_INSERT_BUS)
end function
on ui_control($knob_delay_B_send_level)
	call onuicontrol__knob_delay_B_send_level
end on
function onuicontrol__knob_delay_B_feedback_level()
		set_engine_par($ENGINE_PAR_RDL_FEEDBACK, (1000000 * (get_control_par(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_B_feedback_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $sendfx_slot_num__replika_delay_B, $NI_SEND_BUS)
end function
on ui_control($knob_delay_B_feedback_level)
	call onuicontrol__knob_delay_B_feedback_level
end on
function change_delay_B_time()
		$sendfx_replika_delay_B_time := ($DURATION_QUARTER * $SIGNATURE_NUM * $SIGNATURE_DENOM / 4) * get_control_par(get_ui_id($knob_delay_B_time_numerator), $CONTROL_PAR_VALUE) / get_control_par(get_ui_id($knob_delay_B_time_denominator), $CONTROL_PAR_VALUE)
		set_engine_par($ENGINE_PAR_RDL_TIME, $sendfx_replika_delay_B_time / 2, -1, $sendfx_slot_num__replika_delay_B, $NI_SEND_BUS)
end function
function onuicontrol__knob_delay_B_time_numerator()
	call change_delay_B_time
end function
on ui_control ($knob_delay_B_time_numerator)
	call onuicontrol__knob_delay_B_time_numerator
end on
function onuicontrol__knob_delay_B_time_denominator()
	call change_delay_B_time
end function
on ui_control ($knob_delay_B_time_denominator)
	call onuicontrol__knob_delay_B_time_denominator
end on

function onuicontrol__switch_delay_karplusstrong_sendfx()
	select ($switch_delay_karplusstrong_sendfx)
		case 0
			set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx),$CONTROL_PAR_TEXT, "[ ON ]")
	end select
	set_engine_par($ENGINE_PAR_SEND_EFFECT_BYPASS, ($switch_delay_karplusstrong_sendfx-1)*(-1), -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)
end function
on ui_control($switch_delay_karplusstrong_sendfx)
	call onuicontrol__switch_delay_karplusstrong_sendfx
end on
function onuicontrol__knob_delay_karplusstrong_send_level()
	set_engine_par(%ksp_sendlevel_par[$sendfx_slot_num__replika_karplus_strong], (1000000 * (get_control_par(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_karplusstrong_send_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $insertfx_slot_num__send_levels, $NI_INSERT_BUS)
end function
on ui_control($knob_delay_karplusstrong_send_level)
	call onuicontrol__knob_delay_karplusstrong_send_level
end on
function onuicontrol__knob_delay_karplusstrong_feedback_level()
	$calc_karplusstrong_feedback_level := (get_control_par(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_karplusstrong_feedback_level),$CONTROL_PAR_MIN_VALUE))
	$calc_karplusstrong_feedback_level := real_to_int( exp( log(1000000.0) * int_to_real($calc_karplusstrong_feedback_level) / int_to_real($calc_karplusstrong_feedback_level + 1)  ) )
	set_engine_par($ENGINE_PAR_RDL_FEEDBACK, $calc_karplusstrong_feedback_level, -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)
end function
on ui_control($knob_delay_karplusstrong_feedback_level)
	call onuicontrol__knob_delay_karplusstrong_feedback_level
end on
function onuicontrol__knob_delay_karplusstrong_return_level()
	set_engine_par($ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN, (1000000 * (get_control_par(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($knob_delay_karplusstrong_return_level),$CONTROL_PAR_MIN_VALUE)) ), -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)
end function
on ui_control($knob_delay_karplusstrong_return_level)
	call onuicontrol__knob_delay_karplusstrong_return_level
end on
function change_sendfx_karplusstrong_frequency()
	$sendfx_karplus_strong_frequency := real_to_int(~last_note_freq_hz * int_to_real(get_control_par(get_ui_id($knob_delay_karplusstrong_time_numerator), $CONTROL_PAR_VALUE)) / int_to_real(get_control_par(get_ui_id($knob_delay_karplusstrong_time_denominator), $CONTROL_PAR_VALUE)))
	set_engine_par($ENGINE_PAR_RDL_TIME, (1000000 / 2) / $sendfx_karplus_strong_frequency, -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)
end function
function onuicontrol__knob_delay_karplusstrong_time_numerator()
	call change_sendfx_karplusstrong_frequency
end function
on ui_control($knob_delay_karplusstrong_time_numerator)
	call onuicontrol__knob_delay_karplusstrong_time_numerator
end on
function onuicontrol__knob_delay_karplusstrong_time_denominator()
	call change_sendfx_karplusstrong_frequency
end function
on ui_control($knob_delay_karplusstrong_time_denominator)
	call onuicontrol__knob_delay_karplusstrong_time_denominator
end on
function onuicontrol__switch_delay_karplusstrong_sendfx_latch_freq()
	select ($switch_delay_karplusstrong_sendfx_latch_freq)
		case 0
			set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_TEXT, "[ follow pitch ]")
			set_control_par(get_ui_id($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(get_ui_id($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		case 1
			set_control_par_str(get_ui_id ($switch_delay_karplusstrong_sendfx_latch_freq),$CONTROL_PAR_TEXT, "[ latch freq ]")
			set_control_par(get_ui_id($knob_delay_karplusstrong_time_numerator),$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
			set_control_par(get_ui_id($knob_delay_karplusstrong_time_denominator),$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
	end select
end function
on ui_control($switch_delay_karplusstrong_sendfx_latch_freq)
	call onuicontrol__switch_delay_karplusstrong_sendfx_latch_freq
end on


function onuicontrol__slider__compression_amount()
	set_engine_par($ENGINE_PAR_SCOMP_THRESHOLD, 500000 - (($slider__compression_amount + 1) * 500000 / 128), -1, $mainfx_slot_num__solid_bus_compressor, $NI_MAIN_BUS)
	set_engine_par($ENGINE_PAR_SCOMP_MAKEUP, (1000000/5) + ((($slider__compression_amount + 1) * (1000000*4/5) / 128)*12/20), -1, $mainfx_slot_num__solid_bus_compressor, $NI_MAIN_BUS)
	{
	set_engine_par($ENGINE_PAR_SCOMP_THRESHOLD, ($slider__compression_amount + 1) * 1000000 / 127, -1, $mainfx_slot_num__solid_bus_compressor, $NI_MAIN_BUS)
	set_engine_par($ENGINE_PAR_SCOMP_MAKEUP, ($slider__compression_amount + 1) * 1000000 / 127, -1, $mainfx_slot_num__solid_bus_compressor, $NI_MAIN_BUS)
	}
end function
on ui_control ($slider__compression_amount)
	call onuicontrol__slider__compression_amount
end on

function onuicontrol_slider__dynamics_sustain_strength()
	$calc_dynamics_sustain_strength := (1000000 * (get_control_par(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__dynamics_sustain_strength),$CONTROL_PAR_MIN_VALUE)) )
	set_engine_par($ENGINE_PAR_TR_SUSTAIN, $calc_dynamics_sustain_strength, -1, $mainfx_slot_num__transient_master, $NI_MAIN_BUS)
end function
on ui_control($slider__dynamics_sustain_strength)
	call onuicontrol_slider__dynamics_sustain_strength
end on


function onuicontrol_slider__dynamics_transient_strength()
	$calc_dynamics_transient_strength := (1000000 * (get_control_par(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_VALUE) - get_control_par(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_MIN_VALUE)) / (get_control_par(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_MAX_VALUE)-get_control_par(get_ui_id($slider__dynamics_transient_strength),$CONTROL_PAR_MIN_VALUE)) )
	set_engine_par($ENGINE_PAR_TR_ATTACK, $calc_dynamics_transient_strength, -1, $mainfx_slot_num__transient_master, $NI_MAIN_BUS)
end function
on ui_control($slider__dynamics_transient_strength)
	call onuicontrol_slider__dynamics_transient_strength
end on
function onuicontrol__switch__smooth_attack()
	set_engine_par($ENGINE_PAR_TR_SMOOTH, $switch__smooth_attack, -1, $mainfx_slot_num__transient_master, $NI_MAIN_BUS)
end function
on ui_control ($switch__smooth_attack)
	call onuicontrol__switch__smooth_attack
end on

function onuicontrol__knob_mainfx_stereo_preemfaza
	set_engine_par($ENGINE_PAR_STEREO, ($knob_mainfx_stereo_preemfaza + 1) * 990000 / 127, -1, $mainfx_slot_num__stereo_preemphasis, $NI_MAIN_BUS)
	set_engine_par($ENGINE_PAR_STEREO, 1000000 - (($knob_mainfx_stereo_preemfaza + 1) * 990000 / 127), -1, $mainfx_slot_num__stereo_deemphasis, $NI_MAIN_BUS)
end function
on ui_control ($knob_mainfx_stereo_preemfaza)
	call onuicontrol__knob_mainfx_stereo_preemfaza
end on

on note
	if ($knob__zone_shift # 0)
		change_note($EVENT_ID, $EVENT_NOTE - $knob__zone_shift)
		change_tune($EVENT_ID, 100000 * $knob__zone_shift, 1)
	end if

	{
	disallow_group($ALL_GROUPS)
	ignore_event($EVENT_ID)
	}
	{
	play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
	wait(1)
	}


	$iter := 0
	while ($iter < $NUM_GROUPS)
		if(($iter >= $knob__allowed_group_with_lowest_idx) and ($iter < ($knob__allowed_group_with_lowest_idx + $knob__num_of_allowed_groups)))
			set_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, 1, $iter)
			allow_group($iter)
		else
			set_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, 0, $iter)
			disallow_group($iter)
		end if
		inc($iter)
	end while





	~last_note_freq_hz := 440.0*exp((int_to_real($EVENT_NOTE-69)/12.0 + int_to_real(get_event_par($EVENT_ID,$EVENT_PAR_TUNE))/1200000.0)*log(2.0))

	{karplus-strong:}
	if ($switch_bussynth_karplusstrong_latch_freq # 1)
		$bussynth_karplusstrong_frequency := real_to_int(~last_note_freq_hz * int_to_real(get_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_numerator), $CONTROL_PAR_VALUE)) / int_to_real(get_control_par(get_ui_id($knob_bussynth_karplusstrong__freq_denominator), $CONTROL_PAR_VALUE)))
		set_engine_par($ENGINE_PAR_RDL_TIME, (1000000 / 2) / $bussynth_karplusstrong_frequency, -1, $insertfx_slot_num__replika_karplus_strong, $NI_BUS_OFFSET + $num_of_bus_with_scripted_fx)
	end if
	if ($bus_clean_controls_panel_preset = 1 and $switch_delay_karplusstrong_sendfx_latch_freq # 1)
		$sendfx_karplus_strong_frequency := real_to_int(~last_note_freq_hz * int_to_real(get_control_par(get_ui_id($knob_delay_karplusstrong_time_numerator), $CONTROL_PAR_VALUE)) / int_to_real(get_control_par(get_ui_id($knob_delay_karplusstrong_time_denominator), $CONTROL_PAR_VALUE)))
		set_engine_par($ENGINE_PAR_RDL_TIME, (1000000 / 2) / $sendfx_karplus_strong_frequency, -1, $sendfx_slot_num__replika_karplus_strong, $NI_SEND_BUS)
	end if

	if ($switch_glide_legato_only = 1 and $PLAYED_VOICES_INST < 1)
		{message("num voices " & $PLAYED_VOICES_INST)}
		$iter := 0
		while ($iter < $NUM_GROUPS)
			set_engine_par($ENGINE_PAR_GLIDE_COEF, 0, $iter, find_mod($iter, "GLIDE"), -1)
			inc($iter)
		end while
		wait(1)
		$iter := 0
		while ($iter < $NUM_GROUPS)
			set_engine_par($ENGINE_PAR_GLIDE_COEF, $calc_slider_glide_pitch_value, $iter, find_mod($iter, "GLIDE"), -1)
			inc($iter)
		end while
	end if


	
	wait(1)
  	$last_played_zone_id := get_event_par($EVENT_ID,$EVENT_PAR_ZONE_ID)
  	if ($last_played_zone_id # -1)
	  	attach_zone($Waveform, $last_played_zone_id, $UI_WAVEFORM_TABLE_IS_BIPOLAR)
		while ($NOTE_HELD = 1)
			{message(get_event_par($EVENT_ID, $EVENT_PAR_PLAY_POS) & " " & ~last_note_freq_hz)}
			set_ui_wf_property($Waveform,$UI_WF_PROP_PLAY_CURSOR, 0, get_event_par($EVENT_ID, $EVENT_PAR_PLAY_POS))
			wait_ticks(60)
		end while
	end if

	

end on


on release
	if (get_control_par(get_ui_id ($knob__release_group),$CONTROL_PAR_VALUE) # -1)
		disallow_group($ALL_GROUPS)
        allow_group($knob__release_group)
		$release_callback_id := play_note($EVENT_NOTE,$EVENT_VELOCITY,0,0)
		set_event_par($release_callback_id, $EVENT_PAR_TUNE, get_event_par($EVENT_ID,$EVENT_PAR_TUNE))
		set_event_par($release_callback_id, $EVENT_PAR_PAN, get_event_par($EVENT_ID,$EVENT_PAR_PAN))
	end if
end on


{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{+                                                                                              +}
{+                                                                                              +}
{+                                                                                              +}
{+                                                                                              +}
{+                        S a m p l e r   T e m p l a t e   S c r i p t                         +}
{+                                                                                              +}
{+                                          v 0 . 7 4                                           +}
{+                                                                                              +}
{+                               last edit date: 2024-07-14-19-23                               +}
{+                                                                                              +}
{+                               (c)   J a n   M a c h a l s k i                                +}
{+                                                                                              +}
{+                                                                                              +}
{+                          please consider supporting me on patreon:                           +}
{+                                             TBA                                              +}
{+                                                                                              +}
{+                                                                                              +}
{+                                                                                              +}
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}